<?xml version="1.0" encoding="UTF-8"?>
<registry>
    <comment>
Copyright (c) 2012-2020 The Khronos Group Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

------------------------------------------------------------------------

This file, vx.xml, is the OpenVX API Registry. It is a critically important
and normative part of the OpenVX Specification, including a canonical
machine-readable definition of the API, parameter and member validation
language incorporated into the Specification and reference pages, and other
material which is registered by Khronos, such as tags used by extension and
layer authors. The authoritative public version of vx.xml is maintained in
the master branch of the Khronos OpenVX GitHub project. The authoritative
private version is maintained in the master branch of the member gitlab
server.
    </comment>

    <types comment="OpenVX type definitions">
        <type category="include">#include "<name>stdint.h</name>"</type>
        <type category="include">#include "<name>stddef.h</name>"</type>
        <type category="include">#include &lt;<name>X11/Xlib.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_api.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_compatibility.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_import.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_kernels.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_nodes.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_types.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vx_vendors.h</name>&gt;</type>
        <type category="include">#include &lt;<name>VX/vxu.h</name>&gt;</type>

        <type category="define" name="VX_FMT_REF">
#if defined(_WIN32) || defined(UNDER_CE)
#if defined(_WIN64)
#define VX_FMT_REF  "%I64u"
#else
#define VX_FMT_REF  "%lu"
#endif
#else
#define VX_FMT_REF  "%p"
#endif</type>
        <type category="define" name="VX_FMT_SIZE">
#if defined(_WIN32) || defined(UNDER_CE)
#if defined(_WIN64)
#define VX_FMT_SIZE "%I64u"
#else
#define VX_FMT_SIZE "%lu"
#endif
#else
#define VX_FMT_SIZE "%zu"
#endif</type>
        <type category="define">
#define <name>FGETS</name>(str, fh)                              \
{                                                   \
    char* success = fgets(str, sizeof(str), fh);    \
    if (!success)                                   \
    {                                               \
        printf("fgets failed\n");                   \
    }                                               \
}</type>
        <type category="define">
#define <name>vxFormatArrayPointer</name>(ptr, index, stride) \
    (&amp;(((vx_uint8*)(ptr))[(index) * (stride)]))</type>

        <type category="define">#define <name>VX_ATTRIBUTE_BASE</name>(vendor,object) (((vendor) &lt;&lt; 20) | (object &lt;&lt; 8))</type>
        <type category="define">#define <name>VX_DF_IMAGE</name>(a,b,c,d) ((a) | (b &lt;&lt; 8) | (c &lt;&lt; 16) | (d &lt;&lt; 24))</type>
        <type category="define">#define <name>VX_ENUM_BASE</name>(vendor,id) (((vendor) &lt;&lt; 20) | (id &lt;&lt; 12))</type>
        <type category="define">#define <name>VX_ENUM_TYPE</name>(e) (((vx_uint32)(e) &amp; VX_ENUM_TYPE_MASK) >> 12)</type>
        <type category="define">#define <name>VX_KERNEL_BASE</name>(vendor,lib) (((vendor) &lt;&lt; 20) | (lib &lt;&lt; 12))</type>
        <type category="define">#define <name>VX_LIBRARY</name>(e) (((vx_uint32)(e) &amp; VX_LIBRARY_MASK) >> 12)</type>
        <type category="define">#define <name>VX_TYPE</name>(e) (((vx_uint32)(e) &amp; VX_TYPE_MASK) >> 8)</type>
        <type category="define">#define <name>VX_VENDOR</name>(e) (((vx_uint32)(e) &amp; VX_VENDOR_MASK) >> 20)</type>
        <type category="define">#define <name>VX_VERSION_MAJOR</name>(x) (((x) &amp; 0xFF) &lt;&lt; 8)</type>
        <type category="define">#define <name>VX_VERSION_MINOR</name>(x) (((x) &amp; 0xFF) &lt;&lt; 0)</type>
        <type category="define">#define <name>dimof</name>(x) (sizeof(x)/sizeof(x[0]))</type>
        <type category="define">#define <name>VX_TYPE_USER_DATA_OBJECT</name> 0x816</type>

        <comment>Macro definitions from vx_khr_tiling.h</comment>
        <type category="define">#define <name>vxImageHeight</name>(ptile)         ((ptile))->image.height)</type>
        <type category="define">#define <name>vxImageWidth</name>(ptile)          ((ptile))->image.width)</type>
        <type category="define">#define <name>vxTileX</name>(ptile)               ((ptile)->tile_x)</type>
        <type category="define">#define <name>vxTileY</name>(ptile)               ((ptile)->tile_y)</type>
        <type category="define">#define <name>vxTileWidth</name>(ptile, index)    ((ptile)->addr[index].dim_x)</type>
        <type category="define">#define <name>vxTileHeight</name>(ptile, index)   ((ptile)->addr[index].dim_y)</type>
        <type category="define">#define <name>vxTileBlockHeight</name>(ptile)     ((ptile)->tile_block.height)</type>
        <type category="define">#define <name>vxTileBlockWidth</name>(ptile)      ((ptile)->tile_block.width)</type>
        <type category="define">#define <name>vxNeighborhoodLeft</name>(ptile)    ((ptile)->neighborhood.left)</type>
        <type category="define">#define <name>vxNeighborhoodRight</name>(ptile)   ((ptile)->neighborhood.right)</type>
        <type category="define">#define <name>vxNeighborhoodTop</name>(ptile)     ((ptile)->neighborhood.top)</type>
        <type category="define">#define <name>vxNeighborhoodBottom</name>(ptile)  ((ptile)->neighborhood.bottom)</type>
        <type category="define">#define <name>vxStrideSizeX</name>(ptile, index)  ((ptile)->addr[index].stride_x)</type>
        <type category="define">#define <name>vxStrideSizeY</name>(ptile, index)  ((ptile)->addr[index].stride_y)</type>
        <type category="define">#define <name>vxStepSizeX</name>(ptile, index)    ((ptile)->addr[index].step_x)</type>
        <type category="define">#define <name>vxStepSizeY</name>(ptile, index)    ((ptile)->addr[index].step_y)</type>
        <type category="define">#define <name>vxImageOffset</name>(ptile, i, x, y, ox, oy) \
((ptile)->addr[i].stride_y * (vx_int32)(((vx_int32)((oy)+(y)) * (vx_int32)(ptile)->addr[i].scale_y)/(vx_int32)VX_SCALE_UNITY)) + \
((ptile)->addr[i].stride_x * (vx_int32)(((vx_int32)((ox)+(x)) * (vx_int32)(ptile)->addr[i].scale_x)/(vx_int32)VX_SCALE_UNITY))</type>
        <type category="define">#define <name>vxImagePixel</name>(type, ptile, i, x, y, ox, oy) \
*((type *)(&amp;((vx_uint8 *)(ptile)->base[i])[vxImageOffset(ptile, i, x, y, ox, oy)]))</type>

        <comment>Macro definitions from vx_khr_opencl.h</comment>
        <comment>vxImagePixel collides with the definition from vx_khr_tiling.h!</comment>
        <type category="define">#define <name>vxImagePixel</name>(type, ptr, x, y, sx, sy) \
(*(type *)(&amp;((uchar *)ptr)[((y) * sy) + ((x) * sx)]))</type>
        <type category="define">#define <name>vxArrayItem</name>(type, ptr, index, stride) \
(*(type *)(&amp;((uchar *)ptr)[index*stride]))</type>
        <type category="define">#define <name>vxMatrixElement</name>(type, ptr, columns, i, j) (((type *)ptr)[columns*j + i])</type>
        <type category="define">#define <name>vxConvolveElement</name>(ptr, columns, i, j) (((short *)ptr)[columns*j + i])</type>
        <type category="define">#define <name>vxGetFrequency</name>(ptr, value, offset, range, window_size) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? ptr[(value-offset)/window_size] : 0)</type>
        <type category="define">#define <name>vxIncFrequency</name>(ptr, value, offset, range, window_size) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? ++ptr[(value-offset)/window_size] : 0)</type>
        <type category="define">#define <name>vxDecFrequency</name>(ptr, value, offset, range, window_size) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? --ptr[(value-offset)/window_size] : 0)</type>
        <type category="define">#define <name>vxGetFrequency2</name>(ptr, value, offset, range, num_bins) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? ptr[(value-offset)*num_bins/range] : 0)</type>
        <type category="define">#define <name>vxIncFrequency2</name>(ptr, value, offset, range, num_bins) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? ++ptr[(value-offset)*num_bins/range] : 0)</type>
        <type category="define">#define <name>vxDecFrequency2</name>(ptr, value, offset, range, num_bins) \
((offset &lt;= value) &amp;&amp; (value &lt;= (range+offset)) ? --ptr[(value-offset)*num_bins/range] : 0)</type>

        <type category="basetype">typedef <type>char</type>      <name>vx_char</name>;</type>
        <type category="basetype">typedef <type>uint8_t</type>   <name>vx_uint8</name>;</type>
        <type category="basetype">typedef <type>uint16_t</type>  <name>vx_uint16</name>;</type>
        <type category="basetype">typedef <type>uint32_t</type>  <name>vx_uint32</name>;</type>
        <type category="basetype">typedef <type>uint64_t</type>  <name>vx_uint64</name>;</type>
        <type category="basetype">typedef <type>int8_t</type>    <name>vx_int8</name>;</type>
        <type category="basetype">typedef <type>int16_t</type>   <name>vx_int16</name>;</type>
        <type category="basetype">typedef <type>int32_t</type>   <name>vx_int32</name>;</type>
        <type category="basetype">typedef <type>int64_t</type>   <name>vx_int64</name>;</type>
        <type category="basetype">typedef <type>uint32_t</type>  <name>vx_bitfield</name>;</type>
        <type category="basetype" comment="EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT">typedef <type>hfloat</type>    <name>vx_float16</name>;</type>
        <type category="basetype">typedef <type>float</type>     <name>vx_float32</name>;</type>
        <type category="basetype">typedef <type>double</type>    <name>vx_float64</name>;</type>
        <type category="basetype">typedef <type>int32_t</type>   <name>vx_enum</name>;</type>
        <type category="basetype">typedef <type>size_t</type>    <name>vx_size</name>;</type>
        <type category="basetype">typedef <type>uint32_t</type>  <name>vx_df_image</name>;</type>
        <type category="basetype">typedef <type>uintptr_t</type> <name>vx_map_id</name>;</type>
        <type category="basetype">typedef <type>vx_enum</type>   <name>vx_bool</name>;</type>
        <type category="basetype">typedef <type>vx_enum</type>   <name>vx_status</name>;</type>
        <type category="basetype">typedef <type>vx_enum</type>   <name>vx_action</name>;</type>

            <!-- Anonymous pointer types, for object handles -->
        <type category="basetype">typedef struct _vx_target *<name>vx_target</name>;</type>
        <type category="basetype">typedef struct _vx_import *<name>vx_import</name>;</type>
        <type category="basetype">typedef struct _vx_classifier_model *<name>vx_classifier_model</name>;</type>
        <type category="basetype">typedef struct _vx_platform *<name>vx_platform</name>;</type>
        <type category="basetype">typedef struct _vx_reference *<name>vx_reference</name>;</type>
        <type category="basetype">typedef struct _vx_scalar *<name>vx_scalar</name>;</type>
        <type category="basetype">typedef struct _vx_image *<name>vx_image</name>;</type>
        <type category="basetype">typedef struct _vx_kernel *<name>vx_kernel</name>;</type>
        <type category="basetype">typedef struct _vx_parameter *<name>vx_parameter</name>;</type>
        <type category="basetype">typedef struct _vx_node *<name>vx_node</name>;</type>
        <type category="basetype">typedef struct _vx_graph *<name>vx_graph</name>;</type>
        <type category="basetype">typedef struct _vx_context *<name>vx_context</name>;</type>
        <type category="basetype">typedef struct _vx_delay *<name>vx_delay</name>;</type>
        <type category="basetype">typedef struct _vx_lut *<name>vx_lut</name>;</type>
        <type category="basetype">typedef struct _vx_distribution *<name>vx_distribution</name>;</type>
        <type category="basetype">typedef struct _vx_matrix *<name>vx_matrix</name>;</type>
        <type category="basetype">typedef struct _vx_pyramid *<name>vx_pyramid</name>;</type>
        <type category="basetype">typedef struct _vx_threshold *<name>vx_threshold</name>;</type>
        <type category="basetype">typedef struct _vx_convolution *<name>vx_convolution</name>;</type>
        <type category="basetype">typedef struct _vx_remap *<name>vx_remap</name>;</type>
        <type category="basetype">typedef struct _vx_array *<name>vx_array</name>;</type>
        <type category="basetype">typedef struct _vx_object_array *<name>vx_object_array</name>;</type>
        <type category="basetype">typedef struct _vx_tensor_t *<name>vx_tensor</name>;</type>
        <type category="basetype">typedef struct _vx_meta_format *<name>vx_meta_format</name>;</type>
        <type category="basetype">typedef struct _vx_user_data_object *<name>vx_user_data_object</name>;</type>

            <comment>Basic C types; stdint.h pulled in via vx_types.h</comment>
        <type name="void"/>
        <type name="char"/>
        <type name="int"/>
        <type name="float"/>
        <type name="hfloat" comment="This is for something experimental, no idea where it's defined"/>
        <type name="double"/>
        <type requires="VX/vx_types.h" name="int8_t"/>
        <type requires="VX/vx_types.h" name="uint8_t"/>
        <type requires="VX/vx_types.h" name="int16_t"/>
        <type requires="VX/vx_types.h" name="uint16_t"/>
        <type requires="VX/vx_types.h" name="int32_t"/>
        <type requires="VX/vx_types.h" name="uint32_t"/>
        <type requires="VX/vx_types.h" name="int64_t"/>
        <type requires="VX/vx_types.h" name="uint64_t"/>
        <type requires="VX/vx_types.h" name="uintptr_t"/>
        <type requires="VX/vx_types.h" name="size_t"/>

            <comment>Function pointer types</comment>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_input_validate_f</name>)(<type>vx_node</type> node, <type>vx_uint32</type> index);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_output_validate_f</name>)(
            <type>vx_node</type> node,
            <type>vx_uint32</type> index,
            <type>vx_meta_format</type> meta);</type>
            <comment>#ifdef __cplusplus</comment>
    <type category="funcpointer" name="vx_tiling_kernel_f">typedef void (*vx_tiling_kernel_f)(
            <type>void</type>* parameters[],
            <type>void</type>* tile_memory,
            <type>vx_size</type> tile_memory_size);</type>
        <comment>#else __cplusplus</comment>
    <type category="funcpointer" name="vx_tiling_kernel_f">typedef void (*vx_tiling_kernel_f)(
            <type>void</type>* parameters[],
            <type>void</type>* tile_memory,
            <type>vx_size</type> tile_memory_size);</type>
    <type category="funcpointer">typedef <type>vx_action</type> (*<name>vx_nodecomplete_f</name>)(<type>vx_node</type> node);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_publish_kernels_f</name>)(<type>vx_context</type> context);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_unpublish_kernels_f</name>)(<type>vx_context</type> context);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_f</name>)(
            <type>vx_node</type> node,
            const <type>vx_reference</type> *parameters,
            <type>vx_uint32</type> num);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_initialize_f</name>)(
            <type>vx_node</type> node,
            const <type>vx_reference</type> *parameters,
            <type>vx_uint32</type> num);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_deinitialize_f</name>)(
            <type>vx_node</type> node,
            const <type>vx_reference</type> *parameters,
            <type>vx_uint32</type> num);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_validate_f</name>)(
            <type>vx_node</type> node,
            const <type>vx_reference</type> parameters[],
            <type>vx_uint32</type> num,
            <type>vx_meta_format</type> metas[]);</type>
    <type category="funcpointer">typedef <type>vx_status</type> (*<name>vx_kernel_image_valid_rectangle_f</name>)(
            <type>vx_node</type> node,
            <type>vx_uint32</type> index,
            const <type>vx_rectangle_t</type>* const input_valid[],
            <type>vx_rectangle_t</type>* const output_valid[]);</type>
    <type category="funcpointer">typedef void (*<name>vx_log_callback_f</name>)(
            <type>vx_context</type> context,
            <type>vx_reference</type> ref,
            <type>vx_status</type> status,
            const <type>vx_char</type> string[]);</type>

            <comment>Struct types</comment>
        <type category="struct" name="vx_delta_rectangle_t">
            <member><type>vx_int32</type> <name>delta_start_x</name></member>
            <member><type>vx_int32</type> <name>delta_start_y</name></member>
            <member><type>vx_int32</type> <name>delta_end_x</name></member>
            <member><type>vx_int32</type> <name>delta_end_y</name></member>
        </type>
        <type category="struct" name="vx_param_description_t">
            <member><type>vx_enum</type> <name>direction</name></member>
            <member><type>vx_enum</type> <name>data_type</name></member>
            <member><type>vx_enum</type> <name>state</name></member>
        </type>
        <type category="struct" name="vx_kernel_description_t">
            <member><type>vx_enum</type> <name>enumeration</name></member>
            <member><type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</member>
            <member><type>vx_kernel_f</type> <name>function</name></member>
            <member><type>vx_param_description_t</type>* <name>parameters</name></member>
            <member><type>vx_uint32</type> <name>num</name>Params</member>
            <member><type>vx_kernel_validate_f</type> <name>validate</name></member>
            <member><type>void</type>* <name>input_validate</name></member>
            <member><type>void</type>* <name>output_validate</name></member>
            <member><type>vx_kernel_initialize_f</type> <name>initialize</name></member>
            <member><type>vx_kernel_deinitialize_f</type> <name>deinitialize</name></member>
        </type>
        <type category="struct" name="vx_log_entry_t">
            <member><type>vx_status</type> <name>status</name></member>
            <member><type>vx_reference</type> <name>reference</name></member>
            <member><type>vx_enum</type> <name>active</name></member>
            <member><type>char</type>         <name>message</name>[<enum>VX_MAX_LOG_MESSAGE_LEN</enum>]</member>
        </type>
        <type category="struct" name="vx_log_t">
            <member><type>vx_int32</type> <name>first</name></member>
            <member><type>vx_int32</type> <name>last</name></member>
            <member><type>vx_uint32</type> <name>count</name></member>
            <member><type>vx_log_entry_t</type> <name>entries</name>[<enum>VX_MAX_LOG_NUM_ENTRIES</enum>]</member>
        </type>
        <type category="struct" name="vx_nn_convolution_params_t">
            <member><type>vx_size</type> <name>padding_x</name></member>
            <member><type>vx_size</type> <name>padding_y</name></member>
            <member><type>vx_enum</type> <name>overflow_policy</name></member>
            <member><type>vx_enum</type> <name>rounding_policy</name></member>
            <member><type>vx_enum</type> <name>down_scale_size_rounding</name></member>
            <member><type>vx_size</type> <name>dilation_x</name></member>
            <member><type>vx_size</type> <name>dilation_y</name></member>
        </type>
        <type category="struct" name="vx_nn_deconvolution_params_t">
            <member><type>vx_size</type> <name>padding_x</name></member>
            <member><type>vx_size</type> <name>padding_y</name></member>
            <member><type>vx_enum</type> <name>overflow_policy</name></member>
            <member><type>vx_enum</type> <name>rounding_policy</name></member>
            <member><type>vx_size</type> <name>a_x</name></member>
            <member><type>vx_size</type> <name>a_y</name></member>
        </type>
        <type category="struct" name="vx_nn_roi_pool_params_t">
            <member><type>vx_enum</type> <name>pool_type</name></member>
        </type>
        <type category="struct" name="vx_tile_block_size_t">
            <member><type>vx_int32</type> <name>width</name></member>
            <member><type>vx_int32</type> <name>height</name></member>
        </type>
        <type category="struct" name="vx_neighborhood_size_t">
            <member><type>vx_int32</type> <name>left</name></member>
            <member><type>vx_int32</type> <name>right</name></member>
            <member><type>vx_int32</type> <name>top</name></member>
            <member><type>vx_int32</type> <name>bottom</name></member>
        </type>
        <type category="struct" name="vx_image_description_t">
            <member><type>vx_uint32</type> <name>width</name></member>
            <member><type>vx_uint32</type> <name>height</name></member>
            <member><type>vx_df_image</type> <name>format</name></member>
            <member><type>vx_uint32</type> <name>planes</name></member>
            <member><type>vx_enum</type> <name>range</name></member>
            <member><type>vx_enum</type> <name>space</name></member>
        </type>
        <type category="struct" name="vx_tile_t">
            <member><type>vx_uint8</type>* <name>base</name>[<enum>VX_MAX_TILING_PLANES</enum>]</member>
            <member><type>vx_uint32</type> <name>tile_x</name></member>
            <member><type>vx_uint32</type> <name>tile_y</name></member>
            <member><type>vx_imagepatch_addressing_t</type> <name>addr</name>[<enum>VX_MAX_TILING_PLANES</enum>]</member>
            <member><type>vx_tile_block_size_t</type> <name>tile_block</name></member>
            <member><type>vx_neighborhood_size_t</type> <name>neighborhood</name></member>
            <member><type>vx_image_description_t</type> <name>image</name></member>
        </type>
        <type category="struct" name="vx_imagepatch_addressing_t">
            <member><type>vx_uint32</type> <name>dim_x</name></member>
            <member><type>vx_uint32</type> <name>dim_y</name></member>
            <member><type>vx_int32</type> <name>stride_x</name></member>
            <member><type>vx_int32</type> <name>stride_y</name></member>
            <member><type>vx_uint32</type> <name>scale_x</name></member>
            <member><type>vx_uint32</type> <name>scale_y</name></member>
            <member><type>vx_uint32</type> <name>step_x</name></member>
            <member><type>vx_uint16</type> <name>step_y</name></member>
            <member><type>vx_uint16</type> <name>stride_x_bits</name></member>
        </type>
        <type category="struct" name="vx_perf_t">
            <member><type>vx_uint64</type> <name>tmp</name></member>
            <member><type>vx_uint64</type> <name>beg</name></member>
            <member><type>vx_uint64</type> <name>end</name></member>
            <member><type>vx_uint64</type> <name>sum</name></member>
            <member><type>vx_uint64</type> <name>avg</name></member>
            <member><type>vx_uint64</type> <name>min</name></member>
            <member><type>vx_uint64</type> <name>num</name></member>
            <member><type>vx_uint64</type> <name>max</name></member>
        </type>
        <type category="struct" name="vx_hough_lines_p_t">
            <member><type>vx_float32</type> <name>rho</name></member>
            <member><type>vx_float32</type> <name>theta</name></member>
            <member><type>vx_int32</type> <name>threshold</name></member>
            <member><type>vx_int32</type> <name>line_length</name></member>
            <member><type>vx_int32</type> <name>line_gap</name></member>
            <member><type>vx_float32</type> <name>theta_max</name></member>
            <member><type>vx_float32</type> <name>theta_min</name></member>
        </type>
        <type category="struct" name="vx_line2d_t">
            <member><type>vx_float32</type> <name>start_x</name></member>
            <member><type>vx_float32</type> <name>start_y</name></member>
            <member><type>vx_float32</type> <name>end_x</name></member>
            <member><type>vx_float32</type> <name>end_y</name></member>
        </type>
        <type category="struct" name="vx_tensor_matrix_multiply_params_t">
            <member><type>vx_bool</type> <name>transpose_input1</name></member>
            <member><type>vx_bool</type> <name>transpose_input2</name></member>
            <member><type>vx_bool</type> <name>transpose_input3</name></member>
        </type>
        <type category="struct" name="vx_kernel_info_t">
            <member><type>vx_enum</type> <name>enumeration</name></member>
            <member><type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</member>
        </type>
        <type category="struct" name="vx_keypoint_t">
            <member><type>vx_int32</type> <name>x</name></member>
            <member><type>vx_int32</type> <name>y</name></member>
            <member><type>vx_float32</type> <name>strength</name></member>
            <member><type>vx_float32</type> <name>scale</name></member>
            <member><type>vx_float32</type> <name>orientation</name></member>
            <member><type>vx_int32</type> <name>tracking_status</name></member>
            <member><type>vx_float32</type> <name>error</name></member>
        </type>
        <type category="struct" name="vx_rectangle_t">
            <member><type>vx_uint32</type> <name>start_x</name></member>
            <member><type>vx_uint32</type> <name>start_y</name></member>
            <member><type>vx_uint32</type> <name>end_x</name></member>
            <member><type>vx_uint32</type> <name>end_y</name></member>
        </type>
        <type category="struct" name="vx_coordinates2d_t">
            <member><type>vx_uint32</type> <name>x</name></member>
            <member><type>vx_uint32</type> <name>y</name></member>
        </type>
        <type category="struct" name="vx_coordinates2df_t">
            <member><type>vx_float32</type> <name>x</name></member>
            <member><type>vx_float32</type> <name>y</name></member>
        </type>
        <type category="struct" name="vx_coordinates3d_t">
            <member><type>vx_uint32</type> <name>x</name></member>
            <member><type>vx_uint32</type> <name>y</name></member>
            <member><type>vx_uint32</type> <name>z</name></member>
        </type>
        <type category="union" name="vx_pixel_value_t">
            <member><type>vx_uint8</type> <name>RGB</name>[3]</member>
            <member><type>vx_uint8</type> <name>RGBX</name>[4]</member>
            <member><type>vx_uint8</type> <name>YUV</name>[3]</member>
            <member><type>vx_bool</type> <name>U1</name></member>
            <member><type>vx_uint8</type> <name>U8</name></member>
            <member><type>vx_uint16</type> <name>U16</name></member>
            <member><type>vx_int16</type> <name>S16</name></member>
            <member><type>vx_uint32</type> <name>U32</name></member>
            <member><type>vx_int32</type> <name>S32</name></member>
            <member><type>vx_uint8</type> <name>reserved</name>[16]</member>
        </type>
        <type category="struct" name="vx_hog_t">
            <member><type>vx_int32</type> <name>cell_width</name></member>
            <member><type>vx_int32</type> <name>cell_height</name></member>
            <member><type>vx_int32</type> <name>block_width</name></member>
            <member><type>vx_int32</type> <name>block_height</name></member>
            <member><type>vx_int32</type> <name>block_stride</name></member>
            <member><type>vx_int32</type> <name>num_bins</name></member>
            <member><type>vx_int32</type> <name>window_width</name></member>
            <member><type>vx_int32</type> <name>window_height</name></member>
            <member><type>vx_int32</type> <name>window_stride</name></member>
            <member><type>vx_float32</type> <name>threshold</name></member>
        </type>
        <type category="struct" name="vx_border_t">
            <member><type>vx_enum</type> <name>mode</name></member>
            <member><type>vx_pixel_value_t</type> <name>constant_value</name></member>
        </type>
        <type category="struct" name="vx_graph_parameter_queue_params_t">
            <member><type>uint32_t</type> <name>graph_parameter_index</name></member>
            <member><type>vx_uint32</type> <name>refs_list_size</name></member>
            <member><type>vx_reference</type> *<name>refs_list</name></member>
        </type>
        <type category="struct" name="vx_event_graph_parameter_consumed">
            <member><type>vx_graph</type> <name>graph</name></member>
            <member><type>vx_uint32</type> <name>graph_parameter_index</name></member>
        </type>
        <type category="struct" name="vx_event_graph_completed">
            <member><type>vx_graph</type> <name>graph</name></member>
        </type>
        <type category="struct" name="vx_event_node_completed">
            <member><type>vx_graph</type> <name>graph</name></member>
            <member><type>vx_node</type> <name>node</name></member>
        </type>
        <type category="struct" name="vx_event_node_error">
            <member><type>vx_graph</type> <name>graph</name></member>
            <member><type>vx_node</type> <name>node</name></member>
            <member><type>vx_status</type> <name>status</name></member>
        </type>
        <type category="struct" name="vx_event_user_event">
            <member>void *<name>user_event_parameter</name></member>
        </type>
        <type category="union" name="vx_event_info_t" comment="Broken out from vx_event_t nested definition">
            <member><type>vx_event_graph_parameter_consumed</type> <name>graph_parameter_consumed</name></member>
            <member><type>vx_event_graph_completed</type> <name>graph_completed</name></member>
            <member><type>vx_event_node_completed</type> <name>node_completed</name></member>
            <member><type>vx_event_node_error</type> <name>node_error</name></member>
            <member><type>vx_event_user_event</type> <name>user_event</name></member>
        </type>
        <type category="struct" name="vx_event_t">
            <member><type>vx_enum</type> <name>type</name></member>
            <member><type>vx_uint64</type> <name>timestamp</name></member>
            <member><type>vx_uint32</type> <name>app_value</name></member>
            <member><type>vx_event_info_t</type> <name>event_info</name></member>
        </type>

            <comment>Types generated from corresponding enums tags below</comment>
        <type name="vx_bool_e" category="enum"/>
        <type name="vx_extra_df_image" category="enum"/>
        <type name="vx_accessor_e" category="enum"/>
        <type name="vx_action_e" category="enum"/>
        <type name="vx_array_attribute_e" category="enum"/>
        <type name="vx_border_e" category="enum"/>
        <type name="vx_border_policy_e" category="enum"/>
        <type name="vx_border_tiling_e" category="enum"/>
        <type name="vx_channel_e" category="enum"/>
        <type name="vx_channel_range_e" category="enum"/>
        <type name="vx_class_enum_e" category="enum"/>
        <type name="vx_classifier_model_format_e" category="enum"/>
        <type name="vx_classifier_type_e" category="enum"/>
        <type name="vx_color_space_e" category="enum"/>
        <type name="vx_comp_metric_e" category="enum"/>
        <type name="vx_context_attribute_e" category="enum"/>
        <type name="vx_convert_policy_e" category="enum"/>
        <type name="vx_convolution_attribute_e" category="enum"/>
        <type name="vx_delay_attribute_e" category="enum"/>
        <type name="vx_df_image_e" category="enum"/>
        <type name="vx_direction_e" category="enum"/>
        <type name="vx_directive_e" category="enum"/>
        <type name="vx_distribution_attribute_e" category="enum"/>
        <type name="vx_enum_e" category="enum"/>
        <type name="vx_ext_import_type_e" category="enum"/>
        <type name="vx_ext_import_types_e" category="enum"/>
        <type name="vx_ext_target_context_attribute_e" category="enum"/>
        <type name="vx_ext_target_type_e" category="enum"/>
        <type name="vx_graph_attribute_e" category="enum"/>
        <type name="vx_graph_state_e" category="enum"/>
        <type name="vx_hint_e" category="enum"/>
        <type name="vx_image_attribute_e" category="enum"/>
        <type name="vx_import_attribute_e" category="enum"/>
        <type name="vx_interpolation_type_e" category="enum"/>
        <type name="vx_interpolation_type_ext_e" category="enum"/>
        <type name="vx_kernel_attribute_e" category="enum"/>
        <type name="vx_kernel_attribute_memory_e" category="enum"/>
        <type name="vx_kernel_attribute_tiling_e" category="enum"/>
        <type name="vx_kernel_debug_ext_e" category="enum"/>
        <type name="vx_kernel_e" category="enum"/>
        <type name="vx_kernel_extras_ext_e" category="enum"/>
        <type name="vx_kernel_nn_ext_e" category="enum"/>
        <type name="vx_lbp_format_e" category="enum"/>
        <type name="vx_library_e" category="enum"/>
        <type name="vx_lut_attribute_e" category="enum"/>
        <type name="vx_map_flag_e" category="enum"/>
        <type name="vx_matrix_attribute_e" category="enum"/>
        <type name="vx_memory_type_e" category="enum"/>
        <type name="vx_meta_valid_rect_attribute_e" category="enum"/>
        <type name="vx_nn_activation_function_e" category="enum"/>
        <type name="vx_nn_enum_e" category="enum"/>
        <type name="vx_nn_norm_type_e" category="enum"/>
        <type name="vx_nn_pooling_type_e" category="enum"/>
        <type name="vx_nn_rounding_type_e" category="enum"/>
        <type name="vx_nn_type_e" category="enum"/>
        <type name="vx_node_attribute_e" category="enum"/>
        <type name="vx_node_attribute_memory_e" category="enum"/>
        <type name="vx_node_attribute_tiling_e" category="enum"/>
        <type name="vx_non_linear_filter_e" category="enum"/>
        <type name="vx_norm_type_e" category="enum"/>
        <type name="vx_object_array_attribute_e" category="enum"/>
        <type name="vx_parameter_attribute_e" category="enum"/>
        <type name="vx_parameter_state_e" category="enum"/>
        <type name="vx_pattern_e" category="enum"/>
        <type name="vx_pyramid_attribute_e" category="enum"/>
        <type name="vx_reference_attribute_e" category="enum"/>
        <type name="vx_remap_attribute_e" category="enum"/>
        <type name="vx_round_policy_e" category="enum"/>
        <type name="vx_scalar_attribute_e" category="enum"/>
        <type name="vx_scalar_operation_e" category="enum"/>
        <type name="vx_status_e" category="enum"/>
        <type name="vx_target_attribute_e" category="enum"/>
        <type name="vx_target_e" category="enum"/>
        <type name="vx_tensor_attribute_e" category="enum"/>
        <type name="vx_termination_criteria_e" category="enum"/>
        <type name="vx_threshold_attribute_e" category="enum"/>
        <type name="vx_threshold_type_e" category="enum"/>
        <type name="vx_type_e" category="enum"/>
        <type name="vx_user_data_object_attribute_e" category="enum"/>
        <type name="vx_vendor_id_e" category="enum"/>
        <type name="vx_graph_schedule_mode_enum_e" category="enum"/>
        <type name="vx_graph_schedule_mode_type_e" category="enum"/>
        <type name="vx_graph_attribute_pipelining_e" category="enum"/>
        <type name="vx_node_state_enum_e" category="enum"/>
        <type name="vx_node_state_e" category="enum"/>
        <type name="vx_node_attribute_streaming_e" category="enum"/>
        <type name="vx_kernel_attribute_streaming_e" category="enum"/>
        <type name="vx_event_enum_e" category="enum"/>
        <type name="vx_event_type_e" category="enum"/>
        <type name="vx_buffer_aliasing_enum_e" category="enum"/>
        <type name="vx_buffer_aliasing_processing_type_e" category="enum"/>
    </types>

    <comment>OpenVX enumerant (token) definitions</comment>

    <enums name="API Constants" comment="OpenVX hardcoded constants - not an enumerated type, part of the header boilerplate">
        <enum name="OPENVX_EXT_TARGET"                  value="&quot;vx_ext_target&quot;"/>
        <enum name="OPENVX_KHR_CLASS"                   value="&quot;vx_khr_class&quot;"/>
        <enum name="OPENVX_KHR_DOT"                     value="&quot;vx_khr_dot&quot;"/>
        <enum name="OPENVX_KHR_INTERP"                  value="&quot;vx_khr_interpolation&quot;"/>
        <enum name="OPENVX_KHR_IX"                      value="&quot;vx_khr_ix&quot;"/>
        <enum name="OPENVX_KHR_NN"                      value="&quot;vx_khr_nn&quot;"/>
        <enum name="OPENVX_KHR_NODE_MEMORY"             value="&quot;vx_khr_node_memory&quot;"/>
        <enum name="OPENVX_KHR_OPENCL"                  value="&quot;vx_khr_opencl&quot;"/>
        <enum name="OPENVX_KHR_PIPELINING"              value="&quot;vx_khr_pipelining&quot;"/>
        <enum name="OPENVX_KHR_BUFFER_ALIASING"         value="&quot;vx_khr_buffer_aliasing&quot;"/>
        <enum name="OPENVX_KHR_USER_DATA_OBJECT"        value="&quot;vx_khr_user_data_object&quot;"/>
        <enum name="OPENVX_KHR_TILING"                  value="&quot;vx_khr_tiling&quot;"/>
        <enum name="OPENVX_KHR_VARIANTS"                value="&quot;vx_khr_variants&quot;"/>
        <enum name="OPENVX_KHR_XML"                     value="&quot;vx_khr_xml&quot;"/>
        <enum name="OPENVX_KHR_IMPORT_KERNEL"           value="&quot;vx_khr_import_kernel&quot;"/>
        <enum name="VX_ATTRIBUTE_ID_MASK"               value="(0x000000FF)"/>
        <enum name="VX_CL_MAX_PLANES"                   value="(4)"/>
        <enum name="VX_ENUM_IX_USE"                     value="0x18"/>
        <enum name="VX_ENUM_MASK"                       value="(0x00000FFF)"/>
        <enum name="VX_ENUM_TYPE_MASK"                  value="(0x000FF000)"/>
        <enum name="VX_IMAGEPATCH_ADDR_INIT"            value="{0u, 0u, 0, 0, 0u, 0u, 0u, 0u, 0u}"/>
        <enum name="VX_IX_USE_APPLICATION_CREATE"       value="(VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_IX_USE) + 0x0)"/>
        <enum name="VX_IX_USE_EXPORT_VALUES"            value="(VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_IX_USE) + 0x1)"/>
        <enum name="VX_IX_USE_NO_EXPORT_VALUES"         value="(VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_IX_USE) + 0x2)"/>
        <enum name="VX_KERNEL_MASK"                     value="(0x00000FFF)"/>
        <enum name="VX_LIBRARY_KHR_CLASS_EXTENSION"     value="(0x2)"/>
        <enum name="VX_LIBRARY_KHR_DEBUG"               value="(0xFF)"/>
        <enum name="VX_LIBRARY_KHR_EXTRAS"              value="(0xFE)"/>
        <enum name="VX_LIBRARY_KHR_NN_EXTENSION"        value="(0x1)"/>
        <enum name="VX_LIBRARY_MASK"                    value="(0x000FF000)"/>
        <enum name="VX_MAX_FILE_NAME"                   value="(256)"/>
        <enum name="VX_MAX_IMPLEMENTATION_NAME"         value="(64)"/>
        <enum name="VX_MAX_KERNEL_NAME"                 value="(256)"/>
        <enum name="VX_MAX_LOG_MESSAGE_LEN"             value="(1024)"/>
        <enum name="VX_MAX_LOG_NUM_ENTRIES"             value="(1024)" comment="Conditionally defined iff not present"/>
        <enum name="VX_MAX_REFERENCE_NAME"              value="(64)"/>
        <enum name="VX_MAX_TARGET_NAME"                 value="(64)"/>
        <enum name="VX_MAX_TILING_PLANES"               value="(4)"/>
        <enum name="VX_MAX_VARIANT_NAME"                value="(64)"/>
        <enum name="VX_PERF_INIT"                       value="{0ul, 0ul, 0ul, 0ul, 0ul, 0ul}"/>
        <enum name="VX_SCALE_PYRAMID_HALF"              value="(0.5f)"/>
        <enum name="VX_SCALE_PYRAMID_ORB"               value="((vx_float32)0.8408964f)"/>
        <enum name="VX_SCALE_UNITY"                     value="(1024u)"/>
        <enum name="VX_TAU"                             value="6.28318530717958647692"/>
            <!-- As defined in vx_import.h, but this is really part of the
                 vx_ext_import_type_e enumerated type
        <enum name="VX_TYPE_IMPORT"                     value="0x814"/>
            -->
        <enum name="VX_TYPE_MASK"                       value="(0x000FFF00)"/>
        <enum name="VX_VENDOR_MASK"                     value="(0xFFF00000)"/>
        <enum name="VX_VERSION"                         value="VX_VERSION_1_3"/>
        <enum name="VX_VERSION_1_0"                     value="(VX_VERSION_MAJOR(1) | VX_VERSION_MINOR(0))"/>
        <enum name="VX_VERSION_1_1"                     value="(VX_VERSION_MAJOR(1) | VX_VERSION_MINOR(1))"/>
        <enum name="VX_VERSION_1_2"                     value="(VX_VERSION_MAJOR(1) | VX_VERSION_MINOR(2))"/>
        <enum name="VX_VERSION_1_3"                     value="(VX_VERSION_MAJOR(1) | VX_VERSION_MINOR(3))"/>
    </enums>
    <enums name="vx_ext_target_type_e" type="enum">
        <enum name="VX_TYPE_TARGET" value="0x816"/>
    </enums>
    <enums name="vx_ext_target_context_attribute_e" type="enum">
        <enum name="VX_CONTEXT_TARGETS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xE"/>
    </enums>
    <enums name="vx_target_attribute_e" type="enum">
        <enum name="VX_TARGET_ATTRIBUTE_INDEX" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_TARGET) + 0x0"/>
        <enum name="VX_TARGET_ATTRIBUTE_NAME" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_TARGET) + 0x1"/>
        <enum name="VX_TARGET_ATTRIBUTE_NUMKERNELS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_TARGET) + 0x2"/>
        <enum name="VX_TARGET_ATTRIBUTE_KERNELTABLE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_TARGET) + 0x3"/>
    </enums>
    <enums name="vx_library_e" type="enum">
        <enum name="VX_LIBRARY_KHR_BASE" value="0x0"/>
    </enums>
    <enums name="vx_kernel_e" type="enum">
        <enum name="VX_KERNEL_COLOR_CONVERT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1"/>
        <enum name="VX_KERNEL_CHANNEL_EXTRACT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2"/>
        <enum name="VX_KERNEL_CHANNEL_COMBINE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3"/>
        <enum name="VX_KERNEL_SOBEL_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x4"/>
        <enum name="VX_KERNEL_MAGNITUDE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x5"/>
        <enum name="VX_KERNEL_PHASE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x6"/>
        <enum name="VX_KERNEL_SCALE_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x7"/>
        <enum name="VX_KERNEL_TABLE_LOOKUP" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x8"/>
        <enum name="VX_KERNEL_HISTOGRAM" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x9"/>
        <enum name="VX_KERNEL_EQUALIZE_HISTOGRAM" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xA"/>
        <enum name="VX_KERNEL_ABSDIFF" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xB"/>
        <enum name="VX_KERNEL_MEAN_STDDEV" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xC"/>
        <enum name="VX_KERNEL_THRESHOLD" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xD"/>
        <enum name="VX_KERNEL_INTEGRAL_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xE"/>
        <enum name="VX_KERNEL_DILATE_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0xF"/>
        <enum name="VX_KERNEL_ERODE_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x10"/>
        <enum name="VX_KERNEL_MEDIAN_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x11"/>
        <enum name="VX_KERNEL_BOX_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x12"/>
        <enum name="VX_KERNEL_GAUSSIAN_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x13"/>
        <enum name="VX_KERNEL_CUSTOM_CONVOLUTION" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x14"/>
        <enum name="VX_KERNEL_GAUSSIAN_PYRAMID" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x15"/>
        <enum name="VX_KERNEL_MINMAXLOC" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x19"/>
        <enum name="VX_KERNEL_CONVERTDEPTH" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1A"/>
        <enum name="VX_KERNEL_CANNY_EDGE_DETECTOR" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1B"/>
        <enum name="VX_KERNEL_AND" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1C"/>
        <enum name="VX_KERNEL_OR" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1D"/>
        <enum name="VX_KERNEL_XOR" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1E"/>
        <enum name="VX_KERNEL_NOT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x1F"/>
        <enum name="VX_KERNEL_MULTIPLY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x20"/>
        <enum name="VX_KERNEL_ADD" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x21"/>
        <enum name="VX_KERNEL_SUBTRACT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x22"/>
        <enum name="VX_KERNEL_WARP_AFFINE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x23"/>
        <enum name="VX_KERNEL_WARP_PERSPECTIVE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x24"/>
        <enum name="VX_KERNEL_HARRIS_CORNERS" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x25"/>
        <enum name="VX_KERNEL_FAST_CORNERS" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x26"/>
        <enum name="VX_KERNEL_OPTICAL_FLOW_PYR_LK" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x27"/>
        <enum name="VX_KERNEL_REMAP" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x28"/>
        <enum name="VX_KERNEL_HALFSCALE_GAUSSIAN" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x29"/>
        <enum name="VX_KERNEL_MAX_1_0" value="VX_KERNEL_HALFSCALE_GAUSSIAN + 1" comment="kernel added in OpenVX 1.1"/>
        <enum name="VX_KERNEL_LAPLACIAN_PYRAMID" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2A"/>
        <enum name="VX_KERNEL_LAPLACIAN_RECONSTRUCT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2B"/>
        <enum name="VX_KERNEL_NON_LINEAR_FILTER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2C"/>
        <enum name="VX_KERNEL_MAX_1_1" value="VX_KERNEL_NON_LINEAR_FILTER + 1" comment="kernel added in OpenVX 1.2"/>
        <enum name="VX_KERNEL_MATCH_TEMPLATE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2D"/>
        <enum name="VX_KERNEL_LBP" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2E"/>
        <enum name="VX_KERNEL_HOUGH_LINES_P" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x2F"/>
        <enum name="VX_KERNEL_TENSOR_MULTIPLY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x30"/>
        <enum name="VX_KERNEL_TENSOR_ADD" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x31"/>
        <enum name="VX_KERNEL_TENSOR_SUBTRACT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x32"/>
        <enum name="VX_KERNEL_TENSOR_TABLE_LOOKUP" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x33"/>
        <enum name="VX_KERNEL_TENSOR_TRANSPOSE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x34"/>
        <enum name="VX_KERNEL_TENSOR_CONVERT_DEPTH" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x35"/>
        <enum name="VX_KERNEL_TENSOR_MATRIX_MULTIPLY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x36"/>
        <enum name="VX_KERNEL_COPY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x37"/>
        <enum name="VX_KERNEL_NON_MAX_SUPPRESSION" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x38"/>
        <enum name="VX_KERNEL_SCALAR_OPERATION" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x39"/>
        <enum name="VX_KERNEL_HOG_FEATURES" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3A"/>
        <enum name="VX_KERNEL_HOG_CELLS" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3B"/>
        <enum name="VX_KERNEL_BILATERAL_FILTER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3C"/>
        <enum name="VX_KERNEL_SELECT" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3D"/>
        <enum name="VX_KERNEL_MAX_1_2" value="VX_KERNEL_SELECT + 1" comment="insert new kernels here"/>
        <enum name="VX_KERNEL_MAX" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3E"/>
        <enum name="VX_KERNEL_MIN" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x3F"/>
        <enum name="VX_KERNEL_WEIGHTED_AVERAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_BASE) + 0x40"/>
    </enums>
    <enums name="vx_class_enum_e" type="enum">
        <enum name="VX_ENUM_CLASSIFIER_MODEL" value="0x1E"/>
    </enums>
    <enums name="vx_classifier_model_format_e" type="enum">
        <enum name="VX_CLASSIFIER_MODEL_UNDEFINED" value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_CLASSIFIER_MODEL ) + 0x0"/>
    </enums>
    <enums name="vx_classifier_type_e" type="enum">
        <enum name="VX_TYPE_CLASSIFIER_MODEL" value="0x02C"/>
    </enums>
    <enums name="vx_interpolation_type_ext_e" type="enum">
        <enum name="VX_INTERPOLATION_BICUBIC" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_INTERPOLATION) + 0x3"/>
        <enum name="VX_INTERPOLATION_MIPMAP" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_INTERPOLATION) + 0x4"/>
    </enums>
        <!-- defined in VX/vx_khr_class.h, subset of full definition below
    <enums name="vx_kernel_nn_ext_e" type="enum">
        <enum name="VX_KERNEL_SCAN_CLASSIFIER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_CLASS_EXTENSION) + 0x0"/>
    </enums>
        -->
    <enums name="vx_kernel_nn_ext_e" type="enum">
        <enum name="VX_KERNEL_CONVOLUTION_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x0"/>
        <enum name="VX_KERNEL_FULLY_CONNECTED_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x1"/>
        <enum name="VX_KERNEL_POOLING_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x2"/>
        <enum name="VX_KERNEL_SOFTMAX_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x3"/>
        <enum name="VX_KERNEL_NORMALIZATION_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x4"/>
        <enum name="VX_KERNEL_ACTIVATION_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x5"/>
        <enum name="VX_KERNEL_ROI_POOLING_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x6"/>
        <enum name="VX_KERNEL_DECONVOLUTION_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x7"/>
        <enum name="VX_KERNEL_LOCAL_RESPONSE_NORMALIZATION_LAYER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_NN_EXTENSION) + 0x8"/>
    </enums>
    <enums name="vx_nn_enum_e" type="enum">
        <enum name="VX_ENUM_NN_ROUNDING_TYPE"    value="0x1A"/>
        <enum name="VX_ENUM_NN_POOLING_TYPE"     value="0x1B"/>
        <enum name="VX_ENUM_NN_NORMALIZATION_TYPE"       value="0x1C"/>
        <enum name="VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE" value="0x1D"/>
    </enums>
    <enums name="vx_nn_rounding_type_e" type="enum">
        <enum name="VX_NN_DS_SIZE_ROUNDING_FLOOR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ROUNDING_TYPE) + 0x0"/>
        <enum name="VX_NN_DS_SIZE_ROUNDING_CEILING" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ROUNDING_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_nn_pooling_type_e" type="enum">
        <enum name="VX_NN_POOLING_MAX" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_POOLING_TYPE) + 0x0"/>
        <enum name="VX_NN_POOLING_AVG" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_POOLING_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_nn_norm_type_e" type="enum">
        <enum name="VX_NN_NORMALIZATION_SAME_MAP" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_NORMALIZATION_TYPE) + 0x0"/>
        <enum name="VX_NN_NORMALIZATION_ACROSS_MAPS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_NORMALIZATION_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_nn_activation_function_e" type="enum">
        <enum name="VX_NN_ACTIVATION_LOGISTIC" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x0"/>
        <enum name="VX_NN_ACTIVATION_HYPERBOLIC_TAN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x1"/>
        <enum name="VX_NN_ACTIVATION_RELU" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x2"/>
        <enum name="VX_NN_ACTIVATION_BRELU" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x3"/>
        <enum name="VX_NN_ACTIVATION_SOFTRELU" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x4"/>
        <enum name="VX_NN_ACTIVATION_ABS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x5"/>
        <enum name="VX_NN_ACTIVATION_SQUARE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x6"/>
        <enum name="VX_NN_ACTIVATION_SQRT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x7"/>
        <enum name="VX_NN_ACTIVATION_LINEAR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE) + 0x8"/>
    </enums>
    <enums name="vx_nn_type_e" type="enum">
        <enum name="VX_TYPE_NN_CONVOLUTION_PARAMS"     value="0x025"/>
        <enum name="VX_TYPE_NN_DECONVOLUTION_PARAMS"   value="0x026"/>
        <enum name="VX_TYPE_NN_ROI_POOL_PARAMS"        value="0x027"/>
    </enums>
    <enums name="vx_kernel_attribute_memory_e" type="enum">
        <enum name="VX_KERNEL_GLOBAL_DATA_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x5"/>
        <enum name="VX_KERNEL_GLOBAL_DATA_PTR" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x6"/>
    </enums>
    <enums name="vx_node_attribute_memory_e" type="enum">
        <enum name="VX_NODE_GLOBAL_DATA_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x9"/>
        <enum name="VX_NODE_GLOBAL_DATA_PTR" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xA"/>
    </enums>
    <enums name="vx_kernel_attribute_tiling_e" type="enum">
        <enum name="VX_KERNEL_INPUT_NEIGHBORHOOD"      value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x7"/>
        <enum name="VX_KERNEL_OUTPUT_TILE_BLOCK_SIZE"  value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x8"/>
        <enum name="VX_KERNEL_BORDER"                  value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x9"/>
        <enum name="VX_KERNEL_TILE_MEMORY_SIZE"        value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xA"/>
        <enum name="VX_KERNEL_INPUT_TILE_BLOCK_SIZE"   value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xB" comment="#if defined(OPENVX_TILING_1_1)"/>
        <enum name="VX_KERNEL_OUTPUT_NEIGHBORHOOD"     value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0xC" comment="#if defined(OPENVX_TILING_1_1)"/>
    </enums>
    <enums name="vx_node_attribute_tiling_e" type="enum">
        <enum name="VX_NODE_INPUT_NEIGHBORHOOD"      value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xB"/>
        <enum name="VX_NODE_OUTPUT_TILE_BLOCK_SIZE"  value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xC"/>
        <enum name="VX_NODE_TILE_MEMORY_SIZE"        value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xD"/>
        <enum name="VX_NODE_INPUT_TILE_BLOCK_SIZE"   value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xE" comment="#if defined(OPENVX_TILING_1_1)"/>
        <enum name="VX_NODE_OUTPUT_NEIGHBORHOOD"     value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0xF" comment="#if defined(OPENVX_TILING_1_1)"/>
    </enums>
    <enums name="vx_border_tiling_e" type="enum">
        <enum name="VX_BORDER_MODE_SELF" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x3"/>
    </enums>
    <enums name="vx_ext_import_type_e" type="enum">
        <enum name="VX_TYPE_IMPORT" value="0x814"/>
    </enums>
    <enums name="vx_ext_import_types_e" type="enum">
        <enum name="VX_IMPORT_TYPE_XML" value="0"/>
    </enums>
    <enums name="vx_import_attribute_e" type="enum">
        <enum name="VX_IMPORT_ATTRIBUTE_COUNT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMPORT) + 0x0"/>
        <enum name="VX_IMPORT_ATTRIBUTE_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMPORT) + 0x1"/>
    </enums>
    <enums name="vx_kernel_debug_ext_e" type="enum">
        <enum name="VX_KERNEL_DEBUG_COPY_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x0"/>
        <enum name="VX_KERNEL_DEBUG_COPY_ARRAY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x1"/>
        <enum name="VX_KERNEL_DEBUG_FWRITE_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x2"/>
        <enum name="VX_KERNEL_DEBUG_FWRITE_ARRAY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x3"/>
        <enum name="VX_KERNEL_DEBUG_FREAD_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x4"/>
        <enum name="VX_KERNEL_DEBUG_FREAD_ARRAY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x5"/>
        <enum name="VX_KERNEL_FILL_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x6"/>
        <enum name="VX_KERNEL_CHECK_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x7"/>
        <enum name="VX_KERNEL_CHECK_ARRAY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x8"/>
        <enum name="VX_KERNEL_COMPARE_IMAGE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0x9"/>
        <enum name="VX_KERNEL_COPY_IMAGE_FROM_PTR" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_DEBUG) + 0xA"/>
    </enums>
    <enums name="vx_kernel_extras_ext_e" type="enum">
        <enum name="VX_KERNEL_EXTRAS_NONMAXSUPPRESSION_CANNY" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x0"/>
        <enum name="VX_KERNEL_EXTRAS_LAPLACIAN_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x1"/>
        <enum name="VX_KERNEL_EXTRAS_SCHARR_3x3" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x2"/>
        <enum name="VX_KERNEL_EXTRAS_HARRIS_SCORE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x3"/>
        <enum name="VX_KERNEL_EXTRAS_SOBEL_MxN" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x4"/>
        <enum name="VX_KERNEL_EXTRAS_IMAGE_LISTER" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x5"/>
        <enum name="VX_KERNEL_EXTRAS_EUCLIDEAN_NONMAXSUPPRESSION_HARRIS" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x6"/>
        <enum name="VX_KERNEL_EXTRAS_ELEMENTWISE_NORM" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x7"/>
        <enum name="VX_KERNEL_EXTRAS_EDGE_TRACE" value="VX_KERNEL_BASE(VX_ID_KHRONOS, VX_LIBRARY_KHR_EXTRAS) + 0x8"/>
    </enums>
    <enums name="vx_extra_df_image" type="enum">
        <!-- original enum vx_extra_df_image { ... } -->
        <enum name="VX_DF_IMAGE_F32" value="VX_DF_IMAGE('F','0','3','2')"/>
    </enums>
    <enums name="vx_bool_e" type="enum">
        <!-- original enum vx_bool_e { ... } -->
        <enum value="0"         name="vx_false_e"/>
        <enum value="1"         name="vx_true_e"/>
    </enums>
    <enums name="vx_type_e" type="enum">
        <enum name="VX_TYPE_INVALID"         value="0x000"/>
        <enum name="VX_TYPE_CHAR"            value="0x001"/>
        <enum name="VX_TYPE_INT8"            value="0x002"/>
        <enum name="VX_TYPE_UINT8"           value="0x003"/>
        <enum name="VX_TYPE_INT16"           value="0x004"/>
        <enum name="VX_TYPE_UINT16"          value="0x005"/>
        <enum name="VX_TYPE_INT32"           value="0x006"/>
        <enum name="VX_TYPE_UINT32"          value="0x007"/>
        <enum name="VX_TYPE_INT64"           value="0x008"/>
        <enum name="VX_TYPE_UINT64"          value="0x009"/>
        <enum name="VX_TYPE_FLOAT32"         value="0x00A"/>
        <enum name="VX_TYPE_FLOAT64"         value="0x00B"/>
        <enum name="VX_TYPE_ENUM"            value="0x00C"/>
        <enum name="VX_TYPE_SIZE"            value="0x00D"/>
        <enum name="VX_TYPE_DF_IMAGE"        value="0x00E"/>
        <enum name="VX_TYPE_FLOAT16"         value="0x00F" comment="#if EXPERIMENTAL_PLATFORM_SUPPORTS_16_FLOAT"/>
        <enum name="VX_TYPE_BOOL"            value="0x010"/>
        <enum name="VX_TYPE_RECTANGLE"       value="0x020"/>
        <enum name="VX_TYPE_KEYPOINT"        value="0x021"/>
        <enum name="VX_TYPE_COORDINATES2D"   value="0x022"/>
        <enum name="VX_TYPE_COORDINATES3D"   value="0x023"/>
        <enum name="VX_TYPE_COORDINATES2DF"  value="0x024"/>
            <comment>
        // Reserve enums that are defined in khronos extensions
        // NN extensions:
        // VX_TYPE_NN_CONVOLUTION_PARAMS"     value="0x025"
        // VX_TYPE_NN_DECONVOLUTION_PARAMS"   value="0x026"
        // VX_TYPE_NN_ROI_POOL_PARAMS"        value="0x027"
        // Classifier extension:
        // VX_TYPE_CLASSIFIER_MODEL           value="0x02C"
            </comment>
        <enum name="VX_TYPE_HOG_PARAMS"                       value="0x028"/>
        <enum name="VX_TYPE_HOUGH_LINES_PARAMS"               value="0x029"/>
        <enum name="VX_TYPE_LINE_2D"                          value="0x02A"/>
        <enum name="VX_TYPE_TENSOR_MATRIX_MULTIPLY_PARAMS"    value="0x02B"/>
        <enum name="VX_TYPE_USER_STRUCT_START"    value="0x100"/>
        <enum name="VX_TYPE_VENDOR_STRUCT_START"  value="0x400"/>
        <enum name="VX_TYPE_KHRONOS_OBJECT_START" value="0x800"/>
        <enum name="VX_TYPE_VENDOR_OBJECT_START"  value="0xC00"/>
        <enum name="VX_TYPE_KHRONOS_STRUCT_MAX"   value="VX_TYPE_USER_STRUCT_START - 1"/>
        <enum name="VX_TYPE_USER_STRUCT_END"      value="VX_TYPE_VENDOR_STRUCT_START - 1"/>
        <enum name="VX_TYPE_VENDOR_STRUCT_END"    value="VX_TYPE_KHRONOS_OBJECT_START - 1"/>
        <enum name="VX_TYPE_KHRONOS_OBJECT_END"   value="VX_TYPE_VENDOR_OBJECT_START - 1"/>
        <enum name="VX_TYPE_VENDOR_OBJECT_END"    value="0xFFF"/>
        <enum name="VX_TYPE_REFERENCE"       value="0x800"/>
        <enum name="VX_TYPE_CONTEXT"         value="0x801"/>
        <enum name="VX_TYPE_GRAPH"           value="0x802"/>
        <enum name="VX_TYPE_NODE"            value="0x803"/>
        <enum name="VX_TYPE_KERNEL"          value="0x804"/>
        <enum name="VX_TYPE_PARAMETER"       value="0x805"/>
        <enum name="VX_TYPE_DELAY"           value="0x806"/>
        <enum name="VX_TYPE_LUT"             value="0x807"/>
        <enum name="VX_TYPE_DISTRIBUTION"    value="0x808"/>
        <enum name="VX_TYPE_PYRAMID"         value="0x809"/>
        <enum name="VX_TYPE_THRESHOLD"       value="0x80A"/>
        <enum name="VX_TYPE_MATRIX"          value="0x80B"/>
        <enum name="VX_TYPE_CONVOLUTION"     value="0x80C"/>
        <enum name="VX_TYPE_SCALAR"          value="0x80D"/>
        <enum name="VX_TYPE_ARRAY"           value="0x80E"/>
        <enum name="VX_TYPE_IMAGE"           value="0x80F"/>
        <enum name="VX_TYPE_REMAP"           value="0x810"/>
        <enum name="VX_TYPE_ERROR"           value="0x811"/>
        <enum name="VX_TYPE_META_FORMAT"     value="0x812"/>
        <enum name="VX_TYPE_OBJECT_ARRAY"    value="0x813"/>
        <comment> Reserved for IX and XML extensions </comment>
        <comment> VX_TYPE_IMPORT          -> 0x814, </comment>
        <enum name="VX_TYPE_TENSOR"          value="0x815"/>
            <comment> \todo add new object types here </comment>
    </enums>
    <enums name="vx_status_e" type="enum">
        <comment> add new error codes here </comment>
        <enum name="VX_STATUS_MIN"                       value="-25"/>
        <enum name="VX_ERROR_REFERENCE_NONZERO"          value="-24"/>
        <enum name="VX_ERROR_MULTIPLE_WRITERS"           value="-23"/>
        <enum name="VX_ERROR_GRAPH_ABANDONED"            value="-22"/>
        <enum name="VX_ERROR_GRAPH_SCHEDULED"            value="-21"/>
        <enum name="VX_ERROR_INVALID_SCOPE"              value="-20"/>
        <enum name="VX_ERROR_INVALID_NODE"               value="-19"/>
        <enum name="VX_ERROR_INVALID_GRAPH"              value="-18"/>
        <enum name="VX_ERROR_INVALID_TYPE"               value="-17"/>
        <enum name="VX_ERROR_INVALID_VALUE"              value="-16"/>
        <enum name="VX_ERROR_INVALID_DIMENSION"          value="-15"/>
        <enum name="VX_ERROR_INVALID_FORMAT"             value="-14"/>
        <enum name="VX_ERROR_INVALID_LINK"               value="-13"/>
        <enum name="VX_ERROR_INVALID_REFERENCE"          value="-12"/>
        <enum name="VX_ERROR_INVALID_MODULE"             value="-11"/>
        <enum name="VX_ERROR_INVALID_PARAMETERS"         value="-10"/>
        <enum name="VX_ERROR_OPTIMIZED_AWAY"             value="-9"/>
        <enum name="VX_ERROR_NO_MEMORY"                  value="-8"/>
        <enum name="VX_ERROR_NO_RESOURCES"               value="-7"/>
        <enum name="VX_ERROR_NOT_COMPATIBLE"             value="-6"/>
        <enum name="VX_ERROR_NOT_ALLOCATED"              value="-5"/>
        <enum name="VX_ERROR_NOT_SUFFICIENT"             value="-4"/>
        <enum name="VX_ERROR_NOT_SUPPORTED"              value="-3"/>
        <enum name="VX_ERROR_NOT_IMPLEMENTED"            value="-2"/>
        <enum name="VX_FAILURE"                          value="-1"/>
        <enum name="VX_SUCCESS"                          value=" 0"/>
    </enums>
    <enums name="vx_enum_e" type="enum">
        <enum name="VX_ENUM_DIRECTION"       value="0x00"/>
        <enum name="VX_ENUM_ACTION"          value="0x01"/>
        <enum name="VX_ENUM_HINT"            value="0x02"/>
        <enum name="VX_ENUM_DIRECTIVE"       value="0x03"/>
        <enum name="VX_ENUM_INTERPOLATION"   value="0x04"/>
        <enum name="VX_ENUM_OVERFLOW"        value="0x05"/>
        <enum name="VX_ENUM_COLOR_SPACE"     value="0x06"/>
        <enum name="VX_ENUM_COLOR_RANGE"     value="0x07"/>
        <enum name="VX_ENUM_PARAMETER_STATE" value="0x08"/>
        <enum name="VX_ENUM_CHANNEL"         value="0x09"/>
        <enum name="VX_ENUM_CONVERT_POLICY"  value="0x0A"/>
        <enum name="VX_ENUM_THRESHOLD_TYPE"  value="0x0B"/>
        <enum name="VX_ENUM_BORDER"          value="0x0C"/>
        <enum name="VX_ENUM_COMPARISON"      value="0x0D"/>
        <enum name="VX_ENUM_MEMORY_TYPE"     value="0x0E"/>
        <enum name="VX_ENUM_TERM_CRITERIA"   value="0x0F"/>
        <enum name="VX_ENUM_NORM_TYPE"       value="0x10"/>
        <enum name="VX_ENUM_ACCESSOR"        value="0x11"/>
        <enum name="VX_ENUM_ROUND_POLICY"    value="0x12"/>
        <enum name="VX_ENUM_TARGET"          value="0x13"/>
        <enum name="VX_ENUM_BORDER_POLICY"   value="0x14"/>
        <enum name="VX_ENUM_GRAPH_STATE"     value="0x15"/>
        <enum name="VX_ENUM_NONLINEAR"       value="0x16"/>
        <enum name="VX_ENUM_PATTERN"         value="0x17"/>
        <enum name="VX_ENUM_LBP_FORMAT"      value="0x18"/>
        <enum name="VX_ENUM_COMP_METRIC"     value="0x19"/>
        <comment>
        // NN extension
        // VX_ENUM_NN_ROUNDING_TYPE            0x1A
        // VX_ENUM_NN_POOLING_TYPE             0x1B
        // VX_ENUM_NN_NORMALIZATION_TYPE       0x1C
        // VX_ENUM_NN_ACTIVATION_FUNCTION_TYPE 0x1D
        // Classifier extension
        // VX_ENUM_CLASSIFIER_MODEL            0x1E
        // IX extension
        // VX_ENUM_IX_USE                      0x1F
        </comment>
        <enum name="VX_ENUM_SCALAR_OPERATION" value="0x20"/>
    </enums>
    <enums name="vx_action_e" type="enum">
        <enum name="VX_ACTION_CONTINUE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ACTION) + 0x0"/>
        <enum name="VX_ACTION_ABANDON"  value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ACTION) + 0x1"/>
    </enums>
    <enums name="vx_direction_e" type="enum">
        <enum name="VX_INPUT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTION) + 0x0"/>
        <enum name="VX_OUTPUT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTION) + 0x1"/>
    </enums>
    <enums name="vx_hint_e" type="enum">
        <enum name="VX_HINT_PERFORMANCE_DEFAULT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_HINT) + 0x1"/>
        <enum name="VX_HINT_PERFORMANCE_LOW_POWER" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_HINT) + 0x2"/>
        <enum name="VX_HINT_PERFORMANCE_HIGH_SPEED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_HINT) + 0x3"/>
    </enums>
    <enums name="vx_directive_e" type="enum">
        <enum name="VX_DIRECTIVE_DISABLE_LOGGING" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTIVE) + 0x0"/>
        <enum name="VX_DIRECTIVE_ENABLE_LOGGING" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTIVE) + 0x1"/>
        <enum name="VX_DIRECTIVE_DISABLE_PERFORMANCE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTIVE) + 0x2"/>
        <enum name="VX_DIRECTIVE_ENABLE_PERFORMANCE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_DIRECTIVE) + 0x3"/>
    </enums>
    <enums name="vx_graph_state_e" type="enum">
        <enum name="VX_GRAPH_STATE_UNVERIFIED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_GRAPH_STATE) + 0x0"/>
        <enum name="VX_GRAPH_STATE_VERIFIED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_GRAPH_STATE) + 0x1"/>
        <enum name="VX_GRAPH_STATE_RUNNING" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_GRAPH_STATE) + 0x2"/>
        <enum name="VX_GRAPH_STATE_ABANDONED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_GRAPH_STATE) + 0x3"/>
        <enum name="VX_GRAPH_STATE_COMPLETED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_GRAPH_STATE) + 0x4"/>
    </enums>
    <enums name="vx_graph_attribute_e" type="enum">
        <enum name="VX_GRAPH_NUMNODES" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_GRAPH) + 0x0"/>
        <enum name="VX_GRAPH_PERFORMANCE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_GRAPH) + 0x2"/>
        <enum name="VX_GRAPH_NUMPARAMETERS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_GRAPH) + 0x3"/>
        <enum name="VX_GRAPH_STATE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_GRAPH) + 0x4"/>
    </enums>
    <enums name="vx_convert_policy_e" type="enum">
        <enum name="VX_CONVERT_POLICY_WRAP" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CONVERT_POLICY) + 0x0"/>
        <enum name="VX_CONVERT_POLICY_SATURATE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CONVERT_POLICY) + 0x1"/>
    </enums>
    <enums name="vx_df_image_e" type="enum">
        <enum name="VX_DF_IMAGE_VIRT" value="VX_DF_IMAGE('V','I','R','T')"/>
        <enum name="VX_DF_IMAGE_RGB"  value="VX_DF_IMAGE('R','G','B','2')"/>
        <enum name="VX_DF_IMAGE_RGBX" value="VX_DF_IMAGE('R','G','B','A')"/>
        <enum name="VX_DF_IMAGE_NV12" value="VX_DF_IMAGE('N','V','1','2')"/>
        <enum name="VX_DF_IMAGE_NV21" value="VX_DF_IMAGE('N','V','2','1')"/>
        <enum name="VX_DF_IMAGE_UYVY" value="VX_DF_IMAGE('U','Y','V','Y')"/>
        <enum name="VX_DF_IMAGE_YUYV" value="VX_DF_IMAGE('Y','U','Y','V')"/>
        <enum name="VX_DF_IMAGE_IYUV" value="VX_DF_IMAGE('I','Y','U','V')"/>
        <enum name="VX_DF_IMAGE_YUV4" value="VX_DF_IMAGE('Y','U','V','4')"/>
        <enum name="VX_DF_IMAGE_U1" value="VX_DF_IMAGE('U','0','0','1')"/>
        <enum name="VX_DF_IMAGE_U8" value="VX_DF_IMAGE('U','0','0','8')"/>
        <enum name="VX_DF_IMAGE_U16"  value="VX_DF_IMAGE('U','0','1','6')"/>
        <enum name="VX_DF_IMAGE_S16"  value="VX_DF_IMAGE('S','0','1','6')"/>
        <enum name="VX_DF_IMAGE_U32"  value="VX_DF_IMAGE('U','0','3','2')"/>
        <enum name="VX_DF_IMAGE_S32"  value="VX_DF_IMAGE('S','0','3','2')"/>
    </enums>
    <enums name="vx_target_e" type="enum">
        <enum name="VX_TARGET_ANY" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TARGET) + 0x0000"/>
        <enum name="VX_TARGET_STRING" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TARGET) + 0x0001"/>
        <enum name="VX_TARGET_VENDOR_BEGIN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TARGET) + 0x1000"/>
    </enums>
    <enums name="vx_reference_attribute_e" type="enum">
        <enum name="VX_REFERENCE_COUNT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REFERENCE) + 0x0"/>
        <enum name="VX_REFERENCE_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REFERENCE) + 0x1"/>
        <enum name="VX_REFERENCE_NAME" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REFERENCE) + 0x2"/>
    </enums>
    <enums name="vx_context_attribute_e" type="enum">
        <enum name="VX_CONTEXT_VENDOR_ID" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x0"/>
        <enum name="VX_CONTEXT_VERSION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x1"/>
        <enum name="VX_CONTEXT_UNIQUE_KERNELS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x2"/>
        <enum name="VX_CONTEXT_MODULES" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x3"/>
        <enum name="VX_CONTEXT_REFERENCES" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x4"/>
        <enum name="VX_CONTEXT_IMPLEMENTATION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x5"/>
        <enum name="VX_CONTEXT_EXTENSIONS_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x6"/>
        <enum name="VX_CONTEXT_EXTENSIONS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x7"/>
        <enum name="VX_CONTEXT_CONVOLUTION_MAX_DIMENSION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x8"/>
        <enum name="VX_CONTEXT_OPTICAL_FLOW_MAX_WINDOW_DIMENSION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0x9"/>
        <enum name="VX_CONTEXT_IMMEDIATE_BORDER" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xA"/>
        <enum name="VX_CONTEXT_UNIQUE_KERNEL_TABLE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xB"/>
        <enum name="VX_CONTEXT_IMMEDIATE_BORDER_POLICY" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xC"/>
        <enum name="VX_CONTEXT_NONLINEAR_MAX_DIMENSION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xd"/>
        <enum name="VX_CONTEXT_MAX_TENSOR_DIMS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONTEXT) + 0xE"/>
    </enums>
    <enums name="vx_kernel_attribute_e" type="enum">
        <enum name="VX_KERNEL_PARAMETERS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x0"/>
        <enum name="VX_KERNEL_NAME" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x1"/>
        <enum name="VX_KERNEL_ENUM" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x2"/>
        <enum name="VX_KERNEL_LOCAL_DATA_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_KERNEL) + 0x3"/>
    </enums>
    <enums name="vx_node_attribute_e" type="enum">
        <enum name="VX_NODE_STATUS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x0"/>
        <enum name="VX_NODE_PERFORMANCE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x1"/>
        <enum name="VX_NODE_BORDER" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x2"/>
        <enum name="VX_NODE_LOCAL_DATA_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x3"/>
        <enum name="VX_NODE_LOCAL_DATA_PTR" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x4"/>
        <enum name="VX_NODE_PARAMETERS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x5"/>
        <enum name="VX_NODE_IS_REPLICATED" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x6"/>
        <enum name="VX_NODE_REPLICATE_FLAGS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x7"/>
        <enum name="VX_NODE_VALID_RECT_RESET" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_NODE) + 0x8"/>
    </enums>
    <enums name="vx_parameter_attribute_e" type="enum">
        <enum name="VX_PARAMETER_INDEX" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x0"/>
        <enum name="VX_PARAMETER_DIRECTION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x1"/>
        <enum name="VX_PARAMETER_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x2"/>
        <enum name="VX_PARAMETER_STATE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x3"/>
        <enum name="VX_PARAMETER_REF" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x4"/>
        <enum name="VX_PARAMETER_META_FORMAT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PARAMETER) + 0x5"/>
    </enums>
    <enums name="vx_image_attribute_e" type="enum">
        <enum name="VX_IMAGE_WIDTH" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x0"/>
        <enum name="VX_IMAGE_HEIGHT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x1"/>
        <enum name="VX_IMAGE_FORMAT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x2"/>
        <enum name="VX_IMAGE_PLANES" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x3"/>
        <enum name="VX_IMAGE_SPACE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x4"/>
        <enum name="VX_IMAGE_RANGE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x5"/>
        <enum name="VX_IMAGE_MEMORY_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x7"/>
        <enum name="VX_IMAGE_IS_UNIFORM" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x8"/>
        <enum name="VX_IMAGE_UNIFORM_VALUE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_IMAGE) + 0x9"/>
    </enums>
    <enums name="vx_scalar_attribute_e" type="enum">
        <enum name="VX_SCALAR_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_SCALAR) + 0x0"/>
    </enums>
    <enums name="vx_scalar_operation_e" type="enum">
        <enum name="VX_SCALAR_OP_AND" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x0"/>
        <enum name="VX_SCALAR_OP_OR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x1"/>
        <enum name="VX_SCALAR_OP_XOR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x2"/>
        <enum name="VX_SCALAR_OP_NAND" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x3"/>
        <enum name="VX_SCALAR_OP_EQUAL" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x4"/>
        <enum name="VX_SCALAR_OP_NOTEQUAL" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x5"/>
        <enum name="VX_SCALAR_OP_LESS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x6"/>
        <enum name="VX_SCALAR_OP_LESSEQ" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x7"/>
        <enum name="VX_SCALAR_OP_GREATER" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x8"/>
        <enum name="VX_SCALAR_OP_GREATEREQ" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x9"/>
        <enum name="VX_SCALAR_OP_ADD" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xA"/>
        <enum name="VX_SCALAR_OP_SUBTRACT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xB"/>
        <enum name="VX_SCALAR_OP_MULTIPLY" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xC"/>
        <enum name="VX_SCALAR_OP_DIVIDE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xD"/>
        <enum name="VX_SCALAR_OP_MODULUS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xE"/>
        <enum name="VX_SCALAR_OP_MIN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0xF"/>
        <enum name="VX_SCALAR_OP_MAX" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_SCALAR_OPERATION) + 0x10"/>
    </enums>
    <enums name="vx_lut_attribute_e" type="enum">
        <enum name="VX_LUT_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS,VX_TYPE_LUT) + 0x0"/>
        <enum name="VX_LUT_COUNT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS,VX_TYPE_LUT) + 0x1"/>
        <enum name="VX_LUT_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS,VX_TYPE_LUT) + 0x2"/>
        <enum name="VX_LUT_OFFSET" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS,VX_TYPE_LUT) + 0x3"/>
    </enums>
    <enums name="vx_distribution_attribute_e" type="enum">
        <enum name="VX_DISTRIBUTION_DIMENSIONS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x0"/>
        <enum name="VX_DISTRIBUTION_OFFSET" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x1"/>
        <enum name="VX_DISTRIBUTION_RANGE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x2"/>
        <enum name="VX_DISTRIBUTION_BINS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x3"/>
        <enum name="VX_DISTRIBUTION_WINDOW" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x4"/>
        <enum name="VX_DISTRIBUTION_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DISTRIBUTION) + 0x5"/>
    </enums>
    <enums name="vx_threshold_type_e" type="enum">
        <enum name="VX_THRESHOLD_TYPE_BINARY" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_THRESHOLD_TYPE) + 0x0"/>
        <enum name="VX_THRESHOLD_TYPE_RANGE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_THRESHOLD_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_threshold_attribute_e" type="enum">
        <enum name="VX_THRESHOLD_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_THRESHOLD) + 0x0"/>
        <enum name="VX_THRESHOLD_INPUT_FORMAT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_THRESHOLD) + 0x7"/>
        <enum name="VX_THRESHOLD_OUTPUT_FORMAT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_THRESHOLD) + 0x8"/>
    </enums>
    <enums name="vx_matrix_attribute_e" type="enum">
        <enum name="VX_MATRIX_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x0"/>
        <enum name="VX_MATRIX_ROWS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x1"/>
        <enum name="VX_MATRIX_COLUMNS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x2"/>
        <enum name="VX_MATRIX_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x3"/>
        <enum name="VX_MATRIX_ORIGIN" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x4"/>
        <enum name="VX_MATRIX_PATTERN" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_MATRIX) + 0x5"/>
    </enums>
    <enums name="vx_convolution_attribute_e" type="enum">
        <enum name="VX_CONVOLUTION_ROWS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONVOLUTION) + 0x0"/>
        <enum name="VX_CONVOLUTION_COLUMNS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONVOLUTION) + 0x1"/>
        <enum name="VX_CONVOLUTION_SCALE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONVOLUTION) + 0x2"/>
        <enum name="VX_CONVOLUTION_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_CONVOLUTION) + 0x3"/>
    </enums>
    <enums name="vx_pyramid_attribute_e" type="enum">
        <enum name="VX_PYRAMID_LEVELS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PYRAMID) + 0x0"/>
        <enum name="VX_PYRAMID_SCALE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PYRAMID) + 0x1"/>
        <enum name="VX_PYRAMID_WIDTH" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PYRAMID) + 0x2"/>
        <enum name="VX_PYRAMID_HEIGHT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PYRAMID) + 0x3"/>
        <enum name="VX_PYRAMID_FORMAT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_PYRAMID) + 0x4"/>
    </enums>
    <enums name="vx_remap_attribute_e" type="enum">
        <enum name="VX_REMAP_SOURCE_WIDTH" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REMAP) + 0x0"/>
        <enum name="VX_REMAP_SOURCE_HEIGHT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REMAP) + 0x1"/>
        <enum name="VX_REMAP_DESTINATION_WIDTH" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REMAP) + 0x2"/>
        <enum name="VX_REMAP_DESTINATION_HEIGHT" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_REMAP) + 0x3"/>
    </enums>
    <enums name="vx_array_attribute_e" type="enum">
        <enum name="VX_ARRAY_ITEMTYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_ARRAY) + 0x0"/>
        <enum name="VX_ARRAY_NUMITEMS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_ARRAY) + 0x1"/>
        <enum name="VX_ARRAY_CAPACITY" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_ARRAY) + 0x2"/>
        <enum name="VX_ARRAY_ITEMSIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_ARRAY) + 0x3"/>
    </enums>
    <enums name="vx_object_array_attribute_e" type="enum">
        <enum name="VX_OBJECT_ARRAY_ITEMTYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_OBJECT_ARRAY) + 0x0"/>
        <enum name="VX_OBJECT_ARRAY_NUMITEMS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_OBJECT_ARRAY) + 0x1"/>
    </enums>
    <enums name="vx_tensor_attribute_e" type="enum">
        <enum name="VX_TENSOR_NUMBER_OF_DIMS" value="VX_ATTRIBUTE_BASE( VX_ID_KHRONOS, VX_TYPE_TENSOR ) + 0x0"/>
        <enum name="VX_TENSOR_DIMS"        value="VX_ATTRIBUTE_BASE( VX_ID_KHRONOS, VX_TYPE_TENSOR ) + 0x1"/>
        <enum name="VX_TENSOR_DATA_TYPE"   value="VX_ATTRIBUTE_BASE( VX_ID_KHRONOS, VX_TYPE_TENSOR ) + 0x2"/>
        <enum name="VX_TENSOR_FIXED_POINT_POSITION" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_TENSOR) + 0x3"/>
    </enums>
    <enums name="vx_meta_valid_rect_attribute_e" type="enum">
        <enum name="VX_VALID_RECT_CALLBACK" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_META_FORMAT) + 0x1"/>
    </enums>
    <enums name="vx_channel_e" type="enum">
        <enum name="VX_CHANNEL_0" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x0"/>
        <enum name="VX_CHANNEL_1" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x1"/>
        <enum name="VX_CHANNEL_2" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x2"/>
        <enum name="VX_CHANNEL_3" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x3"/>
        <enum name="VX_CHANNEL_R" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x10"/>
        <enum name="VX_CHANNEL_G" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x11"/>
        <enum name="VX_CHANNEL_B" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x12"/>
        <enum name="VX_CHANNEL_A" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x13"/>
        <enum name="VX_CHANNEL_Y" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x14"/>
        <enum name="VX_CHANNEL_U" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x15"/>
        <enum name="VX_CHANNEL_V" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_CHANNEL) + 0x16"/>
    </enums>
    <enums name="vx_memory_type_e" type="enum">
        <enum name="VX_MEMORY_TYPE_NONE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_MEMORY_TYPE) + 0x0"/>
        <enum name="VX_MEMORY_TYPE_HOST" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_MEMORY_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_interpolation_type_e" type="enum">
        <enum name="VX_INTERPOLATION_NEAREST_NEIGHBOR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_INTERPOLATION) + 0x0"/>
        <enum name="VX_INTERPOLATION_BILINEAR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_INTERPOLATION) + 0x1"/>
        <enum name="VX_INTERPOLATION_AREA" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_INTERPOLATION) + 0x2"/>
    </enums>
    <enums name="vx_non_linear_filter_e" type="enum">
        <enum name="VX_NONLINEAR_FILTER_MEDIAN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NONLINEAR) + 0x0"/>
        <enum name="VX_NONLINEAR_FILTER_MIN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NONLINEAR) + 0x1 "/>
        <enum name="VX_NONLINEAR_FILTER_MAX" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NONLINEAR) + 0x2"/>
    </enums>
    <enums name="vx_pattern_e" type="enum">
        <enum name="VX_PATTERN_BOX" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PATTERN) + 0x0"/>
        <enum name="VX_PATTERN_CROSS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PATTERN) + 0x1 "/>
        <enum name="VX_PATTERN_DISK" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PATTERN) + 0x2"/>
        <enum name="VX_PATTERN_OTHER" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PATTERN) + 0x3"/>
    </enums>
    <enums name="vx_color_space_e" type="enum">
        <enum name="VX_COLOR_SPACE_NONE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_SPACE) + 0x0"/>
        <enum name="VX_COLOR_SPACE_BT601_525" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_SPACE) + 0x1"/>
        <enum name="VX_COLOR_SPACE_BT601_625" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_SPACE) + 0x2"/>
        <enum name="VX_COLOR_SPACE_BT709" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_SPACE) + 0x3"/>
        <enum name="VX_COLOR_SPACE_DEFAULT" value="VX_COLOR_SPACE_BT709"/>
    </enums>
    <enums name="vx_channel_range_e" type="enum">
        <enum name="VX_CHANNEL_RANGE_FULL" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_RANGE) + 0x0"/>
        <enum name="VX_CHANNEL_RANGE_RESTRICTED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_COLOR_RANGE) + 0x1"/>
    </enums>
    <enums name="vx_parameter_state_e" type="enum">
        <enum name="VX_PARAMETER_STATE_REQUIRED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PARAMETER_STATE) + 0x0"/>
        <enum name="VX_PARAMETER_STATE_OPTIONAL" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_PARAMETER_STATE) + 0x1"/>
    </enums>
    <enums name="vx_border_e" type="enum">
        <enum name="VX_BORDER_UNDEFINED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x0"/>
        <enum name="VX_BORDER_CONSTANT" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x1"/>
        <enum name="VX_BORDER_REPLICATE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER) + 0x2"/>
    </enums>
    <enums name="vx_border_policy_e" type="enum">
        <enum name="VX_BORDER_POLICY_DEFAULT_TO_UNDEFINED" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER_POLICY) + 0x0"/>
        <enum name="VX_BORDER_POLICY_RETURN_ERROR" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_BORDER_POLICY) + 0x1"/>
    </enums>
    <enums name="vx_termination_criteria_e" type="enum">
        <enum name="VX_TERM_CRITERIA_ITERATIONS" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TERM_CRITERIA) + 0x0"/>
        <enum name="VX_TERM_CRITERIA_EPSILON" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TERM_CRITERIA) + 0x1"/>
        <enum name="VX_TERM_CRITERIA_BOTH" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_TERM_CRITERIA) + 0x2"/>
    </enums>
    <enums name="vx_norm_type_e" type="enum">
        <enum name="VX_NORM_L1" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NORM_TYPE) + 0x0"/>
        <enum name="VX_NORM_L2" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_NORM_TYPE) + 0x1"/>
    </enums>
    <enums name="vx_delay_attribute_e" type="enum">
        <enum name="VX_DELAY_TYPE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DELAY) + 0x0"/>
        <enum name="VX_DELAY_SLOTS" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_DELAY) + 0x1"/>
    </enums>
    <enums name="vx_accessor_e" type="enum">
        <enum name="VX_READ_ONLY" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ACCESSOR) + 0x1"/>
        <enum name="VX_WRITE_ONLY" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ACCESSOR) + 0x2"/>
        <enum name="VX_READ_AND_WRITE" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ACCESSOR) + 0x3"/>
    </enums>
    <enums name="vx_round_policy_e" type="enum">
        <enum name="VX_ROUND_POLICY_TO_ZERO" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ROUND_POLICY) + 0x1"/>
        <enum name="VX_ROUND_POLICY_TO_NEAREST_EVEN" value="VX_ENUM_BASE(VX_ID_KHRONOS, VX_ENUM_ROUND_POLICY) + 0x2"/>
    </enums>
    <enums name="vx_lbp_format_e" type="enum">
        <enum name="VX_LBP"  value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_LBP_FORMAT ) + 0x0"/>
        <enum name="VX_MLBP" value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_LBP_FORMAT ) + 0x1"/>
        <enum name="VX_ULBP" value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_LBP_FORMAT ) + 0x2"/>
    </enums>
    <enums name="vx_comp_metric_e" type="enum">
        <enum name="VX_COMPARE_HAMMING"    value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x0"/>
        <enum name="VX_COMPARE_L1"         value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x1"/>
        <enum name="VX_COMPARE_L2"         value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x2"/>
        <enum name="VX_COMPARE_CCORR"      value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x3"/>
        <enum name="VX_COMPARE_L2_NORM"    value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x4"/>
        <enum name="VX_COMPARE_CCORR_NORM" value="VX_ENUM_BASE( VX_ID_KHRONOS, VX_ENUM_COMP_METRIC ) + 0x5"/>
    </enums>
    <enums name="vx_map_flag_e" type="enum">
        <enum name="VX_NOGAP_X" value="1"/>
    </enums>
    <enums name="vx_vendor_id_e" type="enum">
        <enum name="VX_ID_KHRONOS"   value="0x000"/>
        <enum name="VX_ID_TI"        value="0x001"/>
        <enum name="VX_ID_QUALCOMM"  value="0x002"/>
        <enum name="VX_ID_NVIDIA"    value="0x003"/>
        <enum name="VX_ID_ARM"       value="0x004"/>
        <enum name="VX_ID_BDTI"      value="0x005"/>
        <enum name="VX_ID_RENESAS"   value="0x006"/>
        <enum name="VX_ID_VIVANTE"   value="0x007"/>
        <enum name="VX_ID_XILINX"    value="0x008"/>
        <enum name="VX_ID_AXIS"      value="0x009"/>
        <enum name="VX_ID_MOVIDIUS"  value="0x00A"/>
        <enum name="VX_ID_SAMSUNG"   value="0x00B"/>
        <enum name="VX_ID_FREESCALE" value="0x00C"/>
        <enum name="VX_ID_AMD"       value="0x00D"/>
        <enum name="VX_ID_BROADCOM"  value="0x00E"/>
        <enum name="VX_ID_INTEL"     value="0x00F"/>
        <enum name="VX_ID_MARVELL"   value="0x010"/>
        <enum name="VX_ID_MEDIATEK"  value="0x011"/>
        <enum name="VX_ID_ST"        value="0x012"/>
        <enum name="VX_ID_CEVA"      value="0x013"/>
        <enum name="VX_ID_ITSEEZ"    value="0x014"/>
        <enum name="VX_ID_IMAGINATION" value="0x015"/>
        <enum name="VX_ID_NXP"       value="0x016"/>
        <enum name="VX_ID_VIDEANTIS" value="0x017"/>
        <enum name="VX_ID_SYNOPSYS"  value="0x018"/>
        <enum name="VX_ID_CADENCE"   value="0x019"/>
        <enum name="VX_ID_HUAWEI"    value="0x01A"/>
        <enum name="VX_ID_SOCIONEXT" value="0x01B" comment="Add new vendor code starting below"/>
        <enum name="VX_ID_USER"      value="0xFFE"/>
        <enum name="VX_ID_MAX"       value="0xFFF"/>
        <enum name="VX_ID_DEFAULT"   value="VX_ID_MAX"/>
    </enums>
    <enums name="vx_graph_schedule_mode_enum_e" type="enum">
        <enum name="VX_ENUM_GRAPH_SCHEDULE_MODE_TYPE"   value="0x21"/>
    </enums>
    <enums name="vx_graph_schedule_mode_type_e" type="enum">
        <enum name="VX_GRAPH_SCHEDULE_MODE_NORMAL"      value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_GRAPH_SCHEDULE_MODE_TYPE &lt;&lt; 12)) + 0x0"/>
        <enum name="VX_GRAPH_SCHEDULE_MODE_QUEUE_AUTO"  value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_GRAPH_SCHEDULE_MODE_TYPE &lt;&lt; 12)) + 0x1"/>
        <enum name="VX_GRAPH_SCHEDULE_MODE_QUEUE_MANUAL" value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_GRAPH_SCHEDULE_MODE_TYPE &lt;&lt; 12)) + 0x2"/>
    </enums>
    <enums name="vx_graph_attribute_pipelining_e" type="enum">
        <enum name="VX_GRAPH_SCHEDULE_MODE"             value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_GRAPH) + 0x5"/>
    </enums>
    <enums name="vx_node_state_enum_e" type="enum">
        <enum name="VX_ENUM_NODE_STATE_TYPE"   value="0x23"/>
    </enums>
    <enums name="vx_node_state_e" type="enum">
        <enum name="VX_NODE_STATE_STEADY"  value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_NODE_STATE_TYPE &lt;&lt; 12)) + 0x0"/>
        <enum name="VX_NODE_STATE_PIPEUP"  value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_NODE_STATE_TYPE &lt;&lt; 12)) + 0x1"/>
    </enums>
    <enums name="vx_node_attribute_streaming_e" type="enum">
        <enum name="VX_NODE_STATE"          value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_TYPE_NODE &lt;&lt; 12)) + 0x9"/>
    </enums>
    <enums name="vx_kernel_attribute_streaming_e" type="enum">
        <enum name="VX_KERNEL_PIPEUP_OUTPUT_DEPTH"          value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_TYPE_KERNEL &lt;&lt; 12)) + 0x4"/>
        <enum name="VX_KERNEL_PIPEUP_INPUT_DEPTH"          value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_TYPE_KERNEL &lt;&lt; 12)) + 0x5"/>
    </enums>
    <enums name="vx_event_enum_e" type="enum">
        <enum name="VX_ENUM_EVENT_TYPE"                 value="0x22"/>
    </enums>
    <enums name="vx_event_type_e" type="enum">
        <enum name="VX_EVENT_GRAPH_PARAMETER_CONSUMED"  value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_EVENT_TYPE &lt;&lt; 12)) + 0x0"/>
        <enum name="VX_EVENT_GRAPH_COMPLETED"           value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_EVENT_TYPE &lt;&lt; 12)) + 0x1"/>
        <enum name="VX_EVENT_NODE_COMPLETED"            value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_EVENT_TYPE &lt;&lt; 12)) + 0x2"/>
        <enum name="VX_EVENT_NODE_ERROR"                value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_EVENT_TYPE &lt;&lt; 12)) + 0x3"/>
        <enum name="VX_EVENT_USER"                      value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_EVENT_TYPE &lt;&lt; 12)) + 0x4"/>
    </enums>
    <enums name="vx_buffer_aliasing_enum_e" type="enum">
        <enum name="VX_ENUM_BUFFER_ALIASING_TYPE"  value="0x1F"/>
    </enums>
    <enums name="vx_buffer_aliasing_processing_type_e" type="enum">
        <enum name="VX_BUFFER_ALIASING_PROCESSING_TYPE_DENSE"  value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_BUFFER_ALIASING_TYPE &lt;&lt; 12)) + 0x0"/>
        <enum name="VX_BUFFER_ALIASING_PROCESSING_TYPE_SPARSE" value="((( VX_ID_KHRONOS ) &lt;&lt; 20) | ( VX_ENUM_BUFFER_ALIASING_TYPE &lt;&lt; 12)) + 0x1"/>
    </enums>
    <enums name="vx_user_data_object_attribute_e" type="enum">
        <enum name="VX_USER_DATA_OBJECT_NAME"  value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_USER_DATA_OBJECT) + 0x0"/>
        <enum name="VX_USER_DATA_OBJECT_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_USER_DATA_OBJECT) + 0x1"/>
        <enum name="VX_USER_DATA_OBJECT_VALID_SIZE" value="VX_ATTRIBUTE_BASE(VX_ID_KHRONOS, VX_TYPE_USER_DATA_OBJECT) + 0x2"/>
    </enums>

    <commands comment="OpenVX command definitions">
        <command>
            <proto><type>vx_context</type> <name>vxCreateContext</name></proto>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseContext</name></proto>
            <param><type>vx_context</type>* <name>context</name></param>
        </command>
        <command>
            <proto><type>vx_context</type> <name>vxGetContext</name></proto>
            <param><type>vx_reference</type> <name>reference</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryContext</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetContextAttribute</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxHint</name></proto>
            <param><type>vx_reference</type> <name>reference</name></param>
            <param><type>vx_enum</type> <name>hint</name></param>
            <param>const void* <name>data</name></param>
            <param><type>vx_size</type> <name>data_size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxDirective</name></proto>
            <param><type>vx_reference</type> <name>reference</name></param>
            <param><type>vx_enum</type> <name>directive</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGetStatus</name></proto>
            <param><type>vx_reference</type> <name>reference</name></param>
        </command>
        <command>
            <proto><type>vx_enum</type> <name>vxRegisterUserStruct</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_enum</type> <name>vxRegisterUserStructWithName</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>size</name></param>
            <param>const vx_char* <name>type_name</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGetUserStructNameByEnum</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>user_struct_type</name></param>
            <param>vx_char* <name>type_name</name></param>
            <param><type>vx_size</type> <name>name_size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGetUserStructEnumByName</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const vx_char* <name>type_name</name></param>
            <param>vx_enum* <name>user_struct_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAllocateUserKernelId</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type>* <name>pKernelEnumId</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAllocateUserKernelLibraryId</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type>* <name>pLibraryId</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetImmediateModeTarget</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>target_enum</name></param>
            <param>const char* <name>target_string</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>width</name></param>
            <param><type>vx_uint32</type> <name>height</name></param>
            <param><type>vx_df_image</type> <name>color</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateImageFromROI</name></proto>
            <param><type>vx_image</type> <name>img</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateUniformImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>width</name></param>
            <param><type>vx_uint32</type> <name>height</name></param>
            <param><type>vx_df_image</type> <name>color</name></param>
            <param>const <type>vx_pixel_value_t</type>* <name>value</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateVirtualImage</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>width</name></param>
            <param><type>vx_uint32</type> <name>height</name></param>
            <param><type>vx_df_image</type> <name>color</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateImageFromHandle</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_df_image</type> <name>color</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type> <name>addrs</name>[]</param>
            <param>void* const <name>ptrs</name>[]</param>
            <param><type>vx_enum</type> <name>memory_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSwapImageHandle</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>void* const <name>new_ptrs</name>[]</param>
            <param>void* <name>prev_ptrs</name>[]</param>
            <param><type>vx_size</type> <name>num_planes</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryImage</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetImageAttribute</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetImagePixelValues</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_pixel_value_t</type>* <name>pixel_value</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseImage</name></proto>
            <param><type>vx_image</type>* <name>image</name></param>
        </command>
        <command>
            <proto>void* <name>vxFormatImagePatchAddress1d</name></proto>
            <param>void* <name>ptr</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
        </command>
        <command>
            <proto>void* <name>vxFormatImagePatchAddress2d</name></proto>
            <param>void* <name>ptr</name></param>
            <param><type>vx_uint32</type> <name>x</name></param>
            <param><type>vx_uint32</type> <name>y</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGetValidRegionImage</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_rectangle_t</type>* <name>rect</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyImagePatch</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>image_rect</name></param>
            <param><type>vx_uint32</type> <name>image_plane_index</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type>* <name>user_addr</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapImagePatch</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_uint32</type> <name>plane_index</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param><type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
            <param><type>vx_uint32</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapImagePatch</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxCreateImageFromChannel</name></proto>
            <param><type>vx_image</type> <name>img</name></param>
            <param><type>vx_enum</type> <name>channel</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetImageValidRectangle</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxLoadKernels</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type>* <name>module</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnloadKernels</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type>* <name>module</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxGetKernelByName</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type>* <name>name</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxGetKernelByEnum</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>kernel</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryKernel</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseKernel</name></proto>
            <param><type>vx_kernel</type>* <name>kernel</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxAddUserKernel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_enum</type> <name>enumeration</name></param>
            <param><type>vx_kernel_f</type> <name>func_ptr</name></param>
            <param><type>vx_uint32</type> <name>numParams</name></param>
            <param><type>vx_kernel_validate_f</type> <name>validate</name></param>
            <param><type>vx_kernel_initialize_f</type> <name>init</name></param>
            <param><type>vx_kernel_deinitialize_f</type> <name>deinit</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxFinalizeKernel</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAddParameterToKernel</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
            <param><type>vx_enum</type> <name>dir</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_enum</type> <name>state</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxRemoveKernel</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetKernelAttribute</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_parameter</type> <name>vxGetKernelParameterByIndex</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_graph</type> <name>vxCreateGraph</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseGraph</name></proto>
            <param><type>vx_graph</type>* <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxVerifyGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxProcessGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxScheduleGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxWaitGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetGraphAttribute</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAddParameterToGraph</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_parameter</type> <name>parameter</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetGraphParameterByIndex</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
            <param><type>vx_reference</type> <name>value</name></param>
        </command>
        <command>
            <proto><type>vx_parameter</type> <name>vxGetGraphParameterByIndex</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_bool</type> <name>vxIsGraphVerified</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxCreateGenericNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_kernel</type> <name>kernel</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryNode</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetNodeAttribute</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseNode</name></proto>
            <param><type>vx_node</type>* <name>node</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxRemoveNode</name></proto>
            <param><type>vx_node</type>* <name>node</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAssignNodeCallback</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_nodecomplete_f</type> <name>callback</name></param>
        </command>
        <command>
            <proto><type>vx_nodecomplete_f</type> <name>vxRetrieveNodeCallback</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetNodeTarget</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_enum</type> <name>target_enum</name></param>
            <param>const char* <name>target_string</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReplicateNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_node</type> <name>first_node</name></param>
            <param><type>vx_bool</type> <name>replicate</name>[]</param>
            <param><type>vx_uint32</type> <name>number_of_parameters</name></param>
        </command>
        <command>
            <proto><type>vx_parameter</type> <name>vxGetParameterByIndex</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseParameter</name></proto>
            <param><type>vx_parameter</type>* <name>param</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetParameterByIndex</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
            <param><type>vx_reference</type> <name>value</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetParameterByReference</name></proto>
            <param><type>vx_parameter</type> <name>parameter</name></param>
            <param><type>vx_reference</type> <name>value</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryParameter</name></proto>
            <param><type>vx_parameter</type> <name>parameter</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_scalar</type> <name>vxCreateScalar</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_scalar</type> <name>vxCreateScalarWithSize</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_scalar</type> <name>vxCreateVirtualScalar</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseScalar</name></proto>
            <param><type>vx_scalar</type>* <name>scalar</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryScalar</name></proto>
            <param><type>vx_scalar</type> <name>scalar</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyScalar</name></proto>
            <param><type>vx_scalar</type> <name>scalar</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyScalarWithSize</name></proto>
            <param><type>vx_scalar</type> <name>scalar</name></param>
            <param><type>vx_size</type> <name>size</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryReference</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseReference</name></proto>
            <param><type>vx_reference</type>* <name>ref_ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxRetainReference</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetReferenceName</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
            <param>const <type>vx_char</type>* <name>name</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryDelay</name></proto>
            <param><type>vx_delay</type> <name>delay</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseDelay</name></proto>
            <param><type>vx_delay</type>* <name>delay</name></param>
        </command>
        <command>
            <proto><type>vx_delay</type> <name>vxCreateDelay</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_reference</type> <name>exemplar</name></param>
            <param><type>vx_size</type> <name>num_slots</name></param>
        </command>
        <command>
            <proto><type>vx_reference</type> <name>vxGetReferenceFromDelay</name></proto>
            <param><type>vx_delay</type> <name>delay</name></param>
            <param><type>vx_int32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAgeDelay</name></proto>
            <param><type>vx_delay</type> <name>delay</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxRegisterAutoAging</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_delay</type> <name>delay</name></param>
        </command>
        <command>
            <proto>void <name>vxAddLogEntry</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
            <param><type>vx_status</type> <name>status</name></param>
            <param>const char* <name>message</name></param>
            <param><name>...</name></param>
        </command>
        <command>
            <proto>void <name>vxRegisterLogCallback</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_log_callback_f</type> <name>callback</name></param>
            <param><type>vx_bool</type> <name>reentrant</name></param>
        </command>
        <command>
            <proto><type>vx_lut</type> <name>vxCreateLUT</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_size</type> <name>count</name></param>
        </command>
        <command>
            <proto><type>vx_lut</type> <name>vxCreateVirtualLUT</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_size</type> <name>count</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseLUT</name></proto>
            <param><type>vx_lut</type>* <name>lut</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
            <param><type>vx_bitfield</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_distribution</type> <name>vxCreateDistribution</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>numBins</name></param>
            <param><type>vx_int32</type> <name>offset</name></param>
            <param><type>vx_uint32</type> <name>range</name></param>
        </command>
        <command>
            <proto><type>vx_distribution</type> <name>vxCreateVirtualDistribution</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_size</type> <name>numBins</name></param>
            <param><type>vx_int32</type> <name>offset</name></param>
            <param><type>vx_uint32</type> <name>range</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseDistribution</name></proto>
            <param><type>vx_distribution</type>* <name>distribution</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
            <param><type>vx_bitfield</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_threshold</type> <name>vxCreateThresholdForImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>thresh_type</name></param>
            <param><type>vx_df_image</type> <name>input_format</name></param>
            <param><type>vx_df_image</type> <name>output_format</name></param>
        </command>
        <command>
            <proto><type>vx_threshold</type> <name>vxCreateVirtualThresholdForImage</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>thresh_type</name></param>
            <param><type>vx_df_image</type> <name>input_format</name></param>
            <param><type>vx_df_image</type> <name>output_format</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyThresholdValue</name></proto>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_pixel_value_t</type>* <name>value_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyThresholdRange</name></proto>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_pixel_value_t</type>* <name>lower_value_ptr</name></param>
            <param><type>vx_pixel_value_t</type>* <name>upper_value_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyThresholdOutput</name></proto>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_pixel_value_t</type>* <name>true_value_ptr</name></param>
            <param><type>vx_pixel_value_t</type>* <name>false_value_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseThreshold</name></proto>
            <param><type>vx_threshold</type>* <name>thresh</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetThresholdAttribute</name></proto>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryThreshold</name></proto>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_matrix</type> <name>vxCreateMatrix</name></proto>
            <param><type>vx_context</type> <name>c</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
        </command>
        <command>
            <proto><type>vx_matrix</type> <name>vxCreateVirtualMatrix</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseMatrix</name></proto>
            <param><type>vx_matrix</type>* <name>mat</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryMatrix</name></proto>
            <param><type>vx_matrix</type> <name>mat</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyMatrix</name></proto>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_matrix</type> <name>vxCreateMatrixFromPattern</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>pattern</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
        </command>
        <command>
            <proto><type>vx_matrix</type> <name>vxCreateMatrixFromPatternAndOrigin</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>pattern</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
            <param><type>vx_size</type> <name>origin_col</name></param>
            <param><type>vx_size</type> <name>origin_row</name></param>
        </command>
        <command>
            <proto><type>vx_convolution</type> <name>vxCreateConvolution</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
        </command>
        <command>
            <proto><type>vx_convolution</type> <name>vxCreateVirtualConvolution</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_size</type> <name>columns</name></param>
            <param><type>vx_size</type> <name>rows</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseConvolution</name></proto>
            <param><type>vx_convolution</type>* <name>conv</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryConvolution</name></proto>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetConvolutionAttribute</name></proto>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyConvolutionCoefficients</name></proto>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_pyramid</type> <name>vxCreatePyramid</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>levels</name></param>
            <param><type>vx_float32</type> <name>scale</name></param>
            <param><type>vx_uint32</type> <name>width</name></param>
            <param><type>vx_uint32</type> <name>height</name></param>
            <param><type>vx_df_image</type> <name>format</name></param>
        </command>
        <command>
            <proto><type>vx_pyramid</type> <name>vxCreateVirtualPyramid</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_size</type> <name>levels</name></param>
            <param><type>vx_float32</type> <name>scale</name></param>
            <param><type>vx_uint32</type> <name>width</name></param>
            <param><type>vx_uint32</type> <name>height</name></param>
            <param><type>vx_df_image</type> <name>format</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleasePyramid</name></proto>
            <param><type>vx_pyramid</type>* <name>pyr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryPyramid</name></proto>
            <param><type>vx_pyramid</type> <name>pyr</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_image</type> <name>vxGetPyramidLevel</name></proto>
            <param><type>vx_pyramid</type> <name>pyr</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_remap</type> <name>vxCreateRemap</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>src_width</name></param>
            <param><type>vx_uint32</type> <name>src_height</name></param>
            <param><type>vx_uint32</type> <name>dst_width</name></param>
            <param><type>vx_uint32</type> <name>dst_height</name></param>
        </command>
        <command>
            <proto><type>vx_remap</type> <name>vxCreateVirtualRemap</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>src_width</name></param>
            <param><type>vx_uint32</type> <name>src_height</name></param>
            <param><type>vx_uint32</type> <name>dst_width</name></param>
            <param><type>vx_uint32</type> <name>dst_height</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseRemap</name></proto>
            <param><type>vx_remap</type>* <name>table</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapRemapPatch</name></proto>
            <param><type>vx_remap</type> <name>remap</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param><type>vx_size</type>* <name>stride_y</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>coordinate_type</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapRemapPatch</name></proto>
            <param><type>vx_remap</type> <name>remap</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyRemapPatch</name></proto>
            <param><type>vx_remap</type> <name>remap</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_size</type> <name>user_stride_y</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>user_coordinate_type</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryRemap</name></proto>
            <param><type>vx_remap</type> <name>table</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_array</type> <name>vxCreateArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>item_type</name></param>
            <param><type>vx_size</type> <name>capacity</name></param>
        </command>
        <command>
            <proto><type>vx_array</type> <name>vxCreateVirtualArray</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>item_type</name></param>
            <param><type>vx_size</type> <name>capacity</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseArray</name></proto>
            <param><type>vx_array</type>* <name>arr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryArray</name></proto>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAddArrayItems</name></proto>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_size</type> <name>count</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>stride</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxTruncateArray</name></proto>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_size</type> <name>new_num_items</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyArrayRange</name></proto>
            <param><type>vx_array</type> <name>array</name></param>
            <param><type>vx_size</type> <name>range_start</name></param>
            <param><type>vx_size</type> <name>range_end</name></param>
            <param><type>vx_size</type> <name>user_stride</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapArrayRange</name></proto>
            <param><type>vx_array</type> <name>array</name></param>
            <param><type>vx_size</type> <name>range_start</name></param>
            <param><type>vx_size</type> <name>range_end</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param><type>vx_size</type>* <name>stride</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
            <param><type>vx_uint32</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapArrayRange</name></proto>
            <param><type>vx_array</type> <name>array</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_user_data_object</type> <name>vxCreateUserDataObject</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const vx_char* <name>type_name</name></param>
            <param><type>vx_size</type> <name>size</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_user_data_object</type> <name>vxCreateVirtualUserDataObject</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param>const vx_char* <name>type_name</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseUserDataObject</name></proto>
            <param><type>vx_user_data_object</type>* <name>user_data_object</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryUserDataObject</name></proto>
            <param><type>vx_user_data_object</type> <name>user_data_object</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetUserDataObjectAttribute</name></proto>
            <param><type>vx_user_data_object</type> <name>user_data_object</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyUserDataObject</name></proto>
            <param><type>vx_user_data_object</type> <name>user_data_object</name></param>
            <param><type>vx_size</type> <name>offset</name></param>
            <param><type>vx_size</type> <name>size</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapUserDataObject</name></proto>
            <param><type>vx_user_data_object</type> <name>user_data_object</name></param>
            <param><type>vx_size</type> <name>offset</name></param>
            <param><type>vx_size</type> <name>size</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
            <param><type>vx_uint32</type> <name>flags</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapUserDataObject</name></proto>
            <param><type>vx_user_data_object</type> <name>user_data_object</name></param>
            <param><type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_object_array</type> <name>vxCreateObjectArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_reference</type> <name>exemplar</name></param>
            <param><type>vx_size</type> <name>count</name></param>
        </command>
        <command>
            <proto><type>vx_object_array</type> <name>vxCreateVirtualObjectArray</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_reference</type> <name>exemplar</name></param>
            <param><type>vx_size</type> <name>count</name></param>
        </command>
        <command>
            <proto><type>vx_reference</type> <name>vxGetObjectArrayItem</name></proto>
            <param><type>vx_object_array</type> <name>arr</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseObjectArray</name></proto>
            <param><type>vx_object_array</type>* <name>arr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryObjectArray</name></proto>
            <param><type>vx_object_array</type> <name>arr</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetMetaFormatAttribute</name></proto>
            <param><type>vx_meta_format</type> <name>meta</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>const void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryMetaFormatAttribute</name></proto>
            <param><type>vx_meta_format</type> <name>meta</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxImportKernelFromURL</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const vx_char*<name>type</name></param>
            <param>const vx_char*<name>url</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetMetaFormatFromReference</name></proto>
            <param><type>vx_meta_format</type> <name>meta</name></param>
            <param><type>vx_reference</type> <name>exemplar</name></param>
        </command>
        <command>
            <proto><type>vx_tensor</type> <name>vxCreateTensor</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>dims</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_int8</type> <name>fixed_point_position</name></param>
        </command>
        <command>
            <proto><type>vx_tensor</type> <name>vxCreateTensorFromHandle</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>dims</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_int8</type> <name>fixed_point_position</name></param>
            <param>const <type>vx_size</type>* <name>stride</name></param>
            <param><type>void</type>* <name>ptr</name></param>
            <param><type>vx_enum</type> <name>memory_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSwapTensorHandle</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param>void* <name>new_ptr</name></param>
            <param>void** <name>prev_ptr</name></param>
        </command>
        <command>
            <proto><type>vx_object_array</type> <name>vxCreateImageObjectArrayFromTensor</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_size</type> <name>array_size</name></param>
            <param><type>vx_size</type> <name>jump</name></param>
            <param><type>vx_df_image</type> <name>image_format</name></param>
        </command>
        <command>
            <proto><type>vx_tensor</type> <name>vxCreateTensorFromView</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>view_start</name></param>
            <param>const <type>vx_size</type>* <name>view_end</name></param>
        </command>
        <command>
            <proto><type>vx_tensor</type> <name>vxCreateVirtualTensor</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>dims</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
            <param><type>vx_int8</type> <name>fixed_point_position</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCopyTensorPatch</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>view_start</name></param>
            <param>const <type>vx_size</type>* <name>view_end</name></param>
            <param>const <type>vx_size</type>* <name>user_stride</name></param>
            <param>void* <name>user_ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>user_memory_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxMapTensorPatch</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param><type>vx_size</type> <name>number_of_dims</name></param>
            <param>const <type>vx_size</type>* <name>view_start</name></param>
            <param>const <type>vx_size</type>* <name>view_end</name></param>
            <param><type>vx_map_id</type>* <name>map_id</name></param>
            <param><type>vx_size</type>* <name>stride</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
            <param><type>vx_enum</type> <name>mem_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxUnmapTensorPatch</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param>const <type>vx_map_id</type> <name>map_id</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryTensor</name></proto>
            <param><type>vx_tensor</type> <name>tensor</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseTensor</name></proto>
            <param><type>vx_tensor</type>* <name>tensor</name></param>
        </command>
        <command>
            <proto><type>vx_target</type> <name>vxGetTargetByIndex</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_target</type> <name>vxGetTargetByName</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type>* <name>name</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseTarget</name></proto>
            <param><type>vx_target</type>* <name>target</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryTarget</name></proto>
            <param><type>vx_target</type> <name>target</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAssignNodeAffinity</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_target</type> <name>target</name></param>
        </command>
        <command>
            <proto>NOAPI uint32_t <name>math_gcd</name></proto>
            <param>uint32_t <name>a</name></param>
            <param>uint32_t <name>b</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxGetLogEntry</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
            <param><type>char</type> <name>message</name>[<enum>VX_MAX_LOG_MESSAGE_LEN</enum>]</param>
        </command>
        <command>
            <proto>NOAPI void <name>vxRegisterHelperAsLogReader</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCreateNodeByStructure</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>kernelenum</name></param>
            <param><type>vx_reference</type> <name>params</name>[]</param>
            <param><type>vx_uint32</type> <name>num</name></param>
        </command>
        <command>
            <proto>NOAPI void <name>vxClearLog</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxLinkParametersByReference</name></proto>
            <param><type>vx_parameter</type> <name>a</name></param>
            <param><type>vx_parameter</type> <name>b</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxLinkParametersByIndex</name></proto>
            <param><type>vx_node</type> <name>node_a</name></param>
            <param><type>vx_uint32</type> <name>index_a</name></param>
            <param><type>vx_node</type> <name>node_b</name></param>
            <param><type>vx_uint32</type> <name>index_b</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxSetAffineRotationMatrix</name></proto>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param><type>vx_float32</type> <name>angle</name></param>
            <param><type>vx_float32</type> <name>scale</name></param>
            <param><type>vx_float32</type> <name>center_x</name></param>
            <param><type>vx_float32</type> <name>center_y</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxAlterRectangle</name></proto>
            <param><type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_int32</type> <name>dsx</name></param>
            <param><type>vx_int32</type> <name>dsy</name></param>
            <param><type>vx_int32</type> <name>dex</name></param>
            <param><type>vx_int32</type> <name>dey</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxAddParameterToGraphByIndex</name></proto>
            <param><type>vx_graph</type> <name>g</name></param>
            <param><type>vx_node</type> <name>n</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command comment="#if EXPERIMENTAL_USE_TARGET">
            <proto>NOAPI <type>vx_bool</type> <name>vxFindAllTargetsOfKernelsByName</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>kname</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_char</type>* <name>targets</name>[]</param>
        </command>
        <command comment="#if EXPERIMENTAL_USE_TARGET">
            <proto>NOAPI <type>vx_bool</type> <name>vxCreateListOfAllTargets</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type>** <name>targets</name>[]</param>
            <param><type>vx_uint32</type>* <name>num_targets</name></param>
        </command>
        <command>
            <proto>NOAPI void <name>vxDestroyListOfAllTargets</name></proto>
            <param><type>vx_char</type>** <name>targets</name>[]</param>
            <param><type>vx_uint32</type> <name>num_targets</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_bool</type> <name>vxFindOverlapRectangle</name></proto>
            <param><type>vx_rectangle_t</type>* <name>rect_a</name></param>
            <param><type>vx_rectangle_t</type>* <name>rect_b</name></param>
            <param><type>vx_rectangle_t</type>* <name>rect_res</name></param>
        </command>
        <command>
            <proto>NOAPI void <name>vxReadRectangle</name></proto>
            <param>const void* <name>base</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
            <param>const <type>vx_border_t</type>* <name>borders</name></param>
            <param><type>vx_df_image</type> <name>type</name></param>
            <param><type>vx_uint32</type> <name>center_x</name></param>
            <param><type>vx_uint32</type> <name>center_y</name></param>
            <param><type>vx_uint32</type> <name>radius_x</name></param>
            <param><type>vx_uint32</type> <name>radius_y</name></param>
            <param>void* <name>destination</name></param>
            <param><type>vx_uint32</type> <name>border_x_start</name></param>
        </command>
        <command>
            <proto><type>vx_import</type> <name>vxImportObjectsFromMemory</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>numrefs</name></param>
            <param><type>vx_reference</type>* <name>refs</name></param>
            <param>const <type>vx_enum</type>* <name>uses</name></param>
            <param>const <type>vx_uint8</type>* <name>ptr</name></param>
            <param><type>vx_size</type> <name>length</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseImport</name></proto>
            <param><type>vx_import</type>* <name>import</name></param>
        </command>
        <command>
            <proto><type>vx_reference</type> <name>vxGetImportReferenceByName</name></proto>
            <param><type>vx_import</type> <name>import</name></param>
            <param>const <type>vx_char</type>* <name>name</name></param>
        </command>
        <command>
            <proto> <type>vx_classifier_model</type> <name>vxImportClassifierModel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>format</name></param>
            <param>const <type>vx_uint8</type>* <name>ptr</name></param>
            <param><type>vx_size</type> <name>length</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseClassifierModel</name></proto>
            <param><type>vx_classifier_model</type>* <name>model</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxScanClassifierNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input_feature_map</name></param>
            <param><type>vx_classifier_model</type> <name>model</name></param>
            <param><type>vx_int32</type> <name>scanwindow_width</name></param>
            <param><type>vx_int32</type> <name>scanwindow_height</name></param>
            <param><type>vx_int32</type> <name>step_x</name></param>
            <param><type>vx_int32</type> <name>step_y</name></param>
            <param><type>vx_array</type> <name>object_confidences</name></param>
            <param><type>vx_array</type> <name>object_rectangles</name></param>
            <param><type>vx_scalar</type> <name>num_objects</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxExportGraphToDot</name></proto>
            <param><type>vx_graph</type> <name>g</name></param>
            <param><type>vx_char</type> <name>dotfile</name>[]</param>
            <param><type>vx_bool</type> <name>showData</name></param>
        </command>
        <command>
            <proto><type>vx_context</type> <name>vxCreateContextFromCL</name></proto>
            <param>cl_context<type></type> <name>opencl_context</name></param>
            <param>cl_command_queue<type></type> <name>opencl_command_queue</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxIcdGetPlatforms</name></proto>
            <param><type>vx_size</type> <name>capacity</name></param>
            <param><type>vx_platform</type> <name>platform</name>[]</param>
            <param><type>vx_size</type>* <name>pNumItems</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxQueryPlatform</name></proto>
            <param><type>vx_platform</type> <name>platform</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_context</type> <name>vxCreateContextFromPlatform</name></proto>
            <param><type>vx_platform</type> <name>platform</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxExportObjectsToMemory</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_size</type> <name>numrefs</name></param>
            <param>const <type>vx_reference</type>* <name>refs</name></param>
            <param>const <type>vx_enum</type>* <name>uses</name></param>
            <param>const <type>vx_uint8</type>** <name>ptr</name></param>
            <param><type>vx_size</type>* <name>length</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReleaseExportedMemory</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_uint8</type>** <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxConvolutionLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_tensor</type> <name>weights</name></param>
            <param><type>vx_tensor</type> <name>biases</name></param>
            <param>const <type>vx_nn_convolution_params_t</type>* <name>convolution_params</name></param>
            <param><type>vx_size</type> <name>size_of_convolution_params</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxFullyConnectedLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_tensor</type> <name>weights</name></param>
            <param><type>vx_tensor</type> <name>biases</name></param>
            <param><type>vx_enum</type> <name>overflow_policy</name></param>
            <param><type>vx_enum</type> <name>rounding_policy</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxPoolingLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_enum</type> <name>pooling_type</name></param>
            <param><type>vx_size</type> <name>pooling_size_x</name></param>
            <param><type>vx_size</type> <name>pooling_size_y</name></param>
            <param><type>vx_size</type> <name>pooling_padding_x</name></param>
            <param><type>vx_size</type> <name>pooling_padding_y</name></param>
            <param><type>vx_enum</type> <name>rounding</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxSoftmaxLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxNormalizationLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_size</type> <name>normalization_size</name></param>
            <param><type>vx_float32</type> <name>alpha</name></param>
            <param><type>vx_float32</type> <name>beta</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxLocalResponseNormalizationLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_size</type> <name>normalization_size</name></param>
            <param><type>vx_float32</type> <name>alpha</name></param>
            <param><type>vx_float32</type> <name>beta</name></param>
            <param><type>vx_float32</type> <name>bias</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxActivationLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_enum</type> <name>function</name></param>
            <param><type>vx_float32</type> <name>a</name></param>
            <param><type>vx_float32</type> <name>b</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxROIPoolingLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input_data</name></param>
            <param><type>vx_tensor</type> <name>input_rois</name></param>
            <param>const <type>vx_nn_roi_pool_params_t</type>* <name>roi_pool_params</name></param>
            <param><type>vx_size</type> <name>size_of_roi_params</name></param>
            <param><type>vx_tensor</type> <name>output_arr</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxDeconvolutionLayer</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>inputs</name></param>
            <param><type>vx_tensor</type> <name>weights</name></param>
            <param><type>vx_tensor</type>  <name>biases</name></param>
            <param>const <type>vx_nn_deconvolution_params_t</type>* <name>deconvolution_params</name></param>
            <param><type>vx_size</type> <name>size_of_deconv_params</name></param>
            <param><type>vx_tensor</type> <name>outputs</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxAddOpenCLAsSourceKernel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_enum</type> <name>enumeration</name></param>
            <param>char* <name>source</name>[]</param>
            <param>size_t <name>line_lengths</name>[]</param>
            <param>size_t <name>num_lines</name></param>
            <param>char <name>symbol_name</name>[]</param>
            <param><type>vx_uint32</type> <name>numParams</name></param>
            <param><type>vx_kernel_input_validate_f</type> <name>input</name></param>
            <param><type>vx_kernel_output_validate_f</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxAddOpenCLAsBinaryKernel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_enum</type> <name>enumeration</name></param>
            <param>cl_program <name>program</name></param>
            <param>char <name>symbol_name</name>[]</param>
            <param><type>vx_uint32</type> <name>numParams</name></param>
            <param><type>vx_kernel_input_validate_f</type> <name>input</name></param>
            <param><type>vx_kernel_output_validate_f</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxAddTilingKernel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_enum</type> <name>enumeration</name></param>
            <param><type>vx_tiling_kernel_f</type> <name>flexible_func_ptr</name></param>
            <param><type>vx_tiling_kernel_f</type> <name>fast_func_ptr</name></param>
            <param><type>vx_uint32</type> <name>num_params</name></param>
            <param><type>vx_kernel_input_validate_f</type> <name>input</name></param>
            <param><type>vx_kernel_output_validate_f</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxChooseKernelVariant</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_char</type> <name>variantName</name>[<enum>VX_MAX_VARIANT_NAME</enum>]</param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxExportToXML</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>xmlfile</name>[]</param>
        </command>
        <command>
            <proto><type>vx_import</type> <name>vxImportFromXML</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>xmlfile</name>[]</param>
        </command>
        <command>
            <proto><type>vx_reference</type> <name>vxGetImportReferenceByIndex</name></proto>
            <param><type>vx_import</type> <name>import</name></param>
            <param><type>vx_uint32</type> <name>index</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxQueryImport</name></proto>
            <param><type>vx_import</type> <name>import</name></param>
            <param><type>vx_enum</type> <name>attribute</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_size</type> <name>size</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCopyImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCopyArrayNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_array</type> <name>input</name></param>
            <param><type>vx_array</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxFWriteImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxFWriteArrayNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_array</type> <name>array</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxFReadImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
            <param><type>vx_image</type> <name>image</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxFReadArrayNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
            <param><type>vx_array</type> <name>array</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxPlusOneNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>image</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxFillImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>value</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCheckImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_uint32</type> <name>value</name></param>
            <param><type>vx_scalar</type> <name>errs</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCheckArrayNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_array</type> <name>input</name></param>
            <param><type>vx_uint8</type> <name>value</name></param>
            <param><type>vx_scalar</type> <name>errs</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCompareImagesNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>a</name></param>
            <param><type>vx_image</type> <name>b</name></param>
            <param><type>vx_scalar</type> <name>diffs</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxCopyImageFromPtrNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCopyImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_image</type> <name>dst</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCopyArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_array</type> <name>src</name></param>
            <param><type>vx_array</type> <name>dst</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuFWriteImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>image</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuFWriteArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_array</type> <name>array</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuFReadImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
            <param><type>vx_image</type> <name>image</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuFReadArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_char</type> <name>name</name>[<enum>VX_MAX_FILE_NAME</enum>]</param>
            <param><type>vx_array</type> <name>array</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxuPlusOneNode</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>image</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuFillImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>value</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCheckImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_uint32</type> <name>value</name></param>
            <param><type>vx_uint32</type>* <name>numErrors</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCheckArray</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_array</type> <name>input</name></param>
            <param><type>vx_uint8</type> <name>value</name></param>
            <param><type>vx_uint32</type>* <name>numErrors</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCompareImages</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>a</name></param>
            <param><type>vx_image</type> <name>b</name></param>
            <param><type>vx_uint32</type>* <name>numDiffs</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuCopyImageFromPtr</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>void* <name>ptr</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxNonMaxSuppressionCannyNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>mag</name></param>
            <param><type>vx_image</type> <name>phase</name></param>
            <param><type>vx_image</type> <name>edge</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxLaplacian3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuLaplacian3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxScharr3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output1</name></param>
            <param><type>vx_image</type> <name>output2</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuScharr3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output1</name></param>
            <param><type>vx_image</type> <name>output2</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxSobelMxNNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>win</name></param>
            <param><type>vx_image</type> <name>gx</name></param>
            <param><type>vx_image</type> <name>gy</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuSobelMxN</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>win</name></param>
            <param><type>vx_image</type> <name>gx</name></param>
            <param><type>vx_image</type> <name>gy</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxHarrisScoreNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>gx</name></param>
            <param><type>vx_image</type> <name>gy</name></param>
            <param><type>vx_scalar</type> <name>sensitivity</name></param>
            <param><type>vx_scalar</type> <name>grad_size</name></param>
            <param><type>vx_scalar</type> <name>block_size</name></param>
            <param><type>vx_image</type> <name>score</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuHarrisScore</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>gx</name></param>
            <param><type>vx_image</type> <name>gy</name></param>
            <param><type>vx_scalar</type> <name>sensitivity</name></param>
            <param><type>vx_scalar</type> <name>grad_size</name></param>
            <param><type>vx_scalar</type> <name>block_size</name></param>
            <param><type>vx_image</type> <name>score</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxEuclideanNonMaxHarrisNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_scalar</type> <name>min_distance</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuEuclideanNonMaxHarris</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_scalar</type> <name>min_distance</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxImageListerNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_scalar</type> <name>num_points</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_status</type> <name>vxuImageLister</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_scalar</type> <name>num_points</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxElementwiseNormNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input_x</name></param>
            <param><type>vx_image</type> <name>input_y</name></param>
            <param><type>vx_scalar</type> <name>norm_type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto>NOAPI <type>vx_node</type> <name>vxEdgeTraceNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>norm</name></param>
            <param><type>vx_threshold</type> <name>threshold</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxColorConvertNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxChannelExtractNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_enum</type> <name>channel</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxChannelCombineNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>plane0</name></param>
            <param><type>vx_image</type> <name>plane1</name></param>
            <param><type>vx_image</type> <name>plane2</name></param>
            <param><type>vx_image</type> <name>plane3</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxPhaseNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>grad_x</name></param>
            <param><type>vx_image</type> <name>grad_y</name></param>
            <param><type>vx_image</type> <name>orientation</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxSobel3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output_x</name></param>
            <param><type>vx_image</type> <name>output_y</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMagnitudeNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>grad_x</name></param>
            <param><type>vx_image</type> <name>grad_y</name></param>
            <param><type>vx_image</type> <name>mag</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxScaleImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_image</type> <name>dst</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTableLookupNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHistogramNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_distribution</type> <name>distribution</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxEqualizeHistNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxAbsDiffNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMeanStdDevNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>mean</name></param>
            <param><type>vx_scalar</type> <name>stddev</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxThresholdNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxNonMaxSuppressionNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>mask</name></param>
            <param><type>vx_int32</type> <name>win_size</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxIntegralImageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxErode3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxDilate3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMedian3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxBox3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxGaussian3x3Node</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxNonLinearFilterNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>function</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>mask</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxConvolveNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxGaussianPyramidNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_pyramid</type> <name>gaussian</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxLaplacianPyramidNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_pyramid</type> <name>laplacian</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxLaplacianReconstructNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_pyramid</type> <name>laplacian</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxWeightedAverageNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>img1</name></param>
            <param><type>vx_scalar</type> <name>alpha</name></param>
            <param><type>vx_image</type> <name>img2</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMinMaxLocNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>minVal</name></param>
            <param><type>vx_scalar</type> <name>maxVal</name></param>
            <param><type>vx_array</type> <name>minLoc</name></param>
            <param><type>vx_array</type> <name>maxLoc</name></param>
            <param><type>vx_scalar</type> <name>minCount</name></param>
            <param><type>vx_scalar</type> <name>maxCount</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMinNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMaxNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxAndNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxOrNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxXorNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxNotNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxScalarOperationNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>scalar_operation</name></param>
            <param><type>vx_scalar</type> <name>a</name></param>
            <param><type>vx_scalar</type> <name>b</name></param>
            <param><type>vx_scalar</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxSelectNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_scalar</type> <name>condition</name></param>
            <param><type>vx_reference</type> <name>true_value</name></param>
            <param><type>vx_reference</type> <name>false_value</name></param>
            <param><type>vx_reference</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMultiplyNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_scalar</type> <name>scale</name></param>
            <param><type>vx_enum</type> <name>overflow_policy</name></param>
            <param><type>vx_enum</type> <name>rounding_policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxAddNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxSubtractNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxConvertDepthNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_scalar</type> <name>shift</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxCannyEdgeDetectorNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_threshold</type> <name>hyst</name></param>
            <param><type>vx_int32</type> <name>gradient_size</name></param>
            <param><type>vx_enum</type> <name>norm_type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxWarpAffineNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxWarpPerspectiveNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHarrisCornersNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_scalar</type> <name>min_distance</name></param>
            <param><type>vx_scalar</type> <name>sensitivity</name></param>
            <param><type>vx_int32</type> <name>gradient_size</name></param>
            <param><type>vx_int32</type> <name>block_size</name></param>
            <param><type>vx_array</type> <name>corners</name></param>
            <param><type>vx_scalar</type> <name>num_corners</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxFastCornersNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_bool</type> <name>nonmax_suppression</name></param>
            <param><type>vx_array</type> <name>corners</name></param>
            <param><type>vx_scalar</type> <name>num_corners</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxOpticalFlowPyrLKNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_pyramid</type> <name>old_images</name></param>
            <param><type>vx_pyramid</type> <name>new_images</name></param>
            <param><type>vx_array</type> <name>old_points</name></param>
            <param><type>vx_array</type> <name>new_points_estimates</name></param>
            <param><type>vx_array</type> <name>new_points</name></param>
            <param><type>vx_enum</type> <name>termination</name></param>
            <param><type>vx_scalar</type> <name>epsilon</name></param>
            <param><type>vx_scalar</type> <name>num_iterations</name></param>
            <param><type>vx_scalar</type> <name>use_initial_estimate</name></param>
            <param><type>vx_size</type> <name>window_dimension</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxRemapNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_remap</type> <name>table</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHalfScaleGaussianNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
            <param><type>vx_int32</type> <name>kernel_size</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxMatchTemplateNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_image</type> <name>templateImage</name></param>
            <param><type>vx_enum</type> <name>matchingMethod</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxLBPNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_enum</type> <name>format</name></param>
            <param><type>vx_int8</type> <name>kernel_size</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHOGFeaturesNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_tensor</type> <name>magnitudes</name></param>
            <param><type>vx_tensor</type> <name>bins</name></param>
            <param>const <type>vx_hog_t</type>* <name>params</name></param>
            <param><type>vx_size</type> <name>hog_param_size</name></param>
            <param><type>vx_tensor</type> <name>features</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHOGCellsNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_int32</type> <name>cell_width</name></param>
            <param><type>vx_int32</type> <name>cell_height</name></param>
            <param><type>vx_int32</type> <name>num_bins</name></param>
            <param><type>vx_tensor</type> <name>magnitudes</name></param>
            <param><type>vx_tensor</type> <name>bins</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxHoughLinesPNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param>const <type>vx_hough_lines_p_t</type>* <name>params</name></param>
            <param><type>vx_array</type> <name>lines_array</name></param>
            <param><type>vx_scalar</type> <name>num_lines</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxBilateralFilterNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>src</name></param>
            <param><type>vx_int32</type> <name>diameter</name></param>
            <param><type>vx_float32</type> <name>sigmaSpace</name></param>
            <param><type>vx_float32</type> <name>sigmaValues</name></param>
            <param><type>vx_tensor</type> <name>dst</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorMultiplyNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_scalar</type> <name>scale</name></param>
            <param><type>vx_enum</type> <name>overflow_policy</name></param>
            <param><type>vx_enum</type> <name>rounding_policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorAddNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorSubtractNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorTableLookupNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorTransposeNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
            <param><type>vx_size</type> <name>dimension1</name></param>
            <param><type>vx_size</type> <name>dimension2</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorConvertDepthNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_scalar</type> <name>norm</name></param>
            <param><type>vx_scalar</type> <name>offset</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxTensorMatrixMultiplyNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_tensor</type> <name>input3</name></param>
            <param>const <type>vx_tensor_matrix_multiply_params_t</type>* <name>matrix_multiply_params</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_node</type> <name>vxCopyNode</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_reference</type> <name>input</name></param>
            <param><type>vx_reference</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuColorConvert</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuChannelExtract</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_enum</type> <name>channel</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuChannelCombine</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>plane0</name></param>
            <param><type>vx_image</type> <name>plane1</name></param>
            <param><type>vx_image</type> <name>plane2</name></param>
            <param><type>vx_image</type> <name>plane3</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuSobel3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output_x</name></param>
            <param><type>vx_image</type> <name>output_y</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMagnitude</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>grad_x</name></param>
            <param><type>vx_image</type> <name>grad_y</name></param>
            <param><type>vx_image</type> <name>mag</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuPhase</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>grad_x</name></param>
            <param><type>vx_image</type> <name>grad_y</name></param>
            <param><type>vx_image</type> <name>orientation</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuScaleImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_image</type> <name>dst</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTableLookup</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHistogram</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_distribution</type> <name>distribution</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuEqualizeHist</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuAbsDiff</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMeanStdDev</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_float32</type>* <name>mean</name></param>
            <param><type>vx_float32</type>* <name>stddev</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuThreshold</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_threshold</type> <name>thresh</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuNonMaxSuppression</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>mask</name></param>
            <param><type>vx_int32</type> <name>win_size</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuIntegralImage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuErode3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuDilate3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMedian3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuBox3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuGaussian3x3</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuNonLinearFilter</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_enum</type> <name>function</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>mask</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuConvolve</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuGaussianPyramid</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_pyramid</type> <name>gaussian</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuLaplacianPyramid</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_pyramid</type> <name>laplacian</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuLaplacianReconstruct</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_pyramid</type> <name>laplacian</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuWeightedAverage</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>img1</name></param>
            <param><type>vx_scalar</type> <name>alpha</name></param>
            <param><type>vx_image</type> <name>img2</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMinMaxLoc</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>minVal</name></param>
            <param><type>vx_scalar</type> <name>maxVal</name></param>
            <param><type>vx_array</type> <name>minLoc</name></param>
            <param><type>vx_array</type> <name>maxLoc</name></param>
            <param><type>vx_scalar</type> <name>minCount</name></param>
            <param><type>vx_scalar</type> <name>maxCount</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMin</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMax</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuConvertDepth</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_int32</type> <name>shift</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuCannyEdgeDetector</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_threshold</type> <name>hyst</name></param>
            <param><type>vx_int32</type> <name>gradient_size</name></param>
            <param><type>vx_enum</type> <name>norm_type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHalfScaleGaussian</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
            <param><type>vx_int32</type> <name>kernel_size</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuAnd</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuOr</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuXor</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuNot</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMultiply</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_float32</type> <name>scale</name></param>
            <param><type>vx_enum</type> <name>overflow_policy</name></param>
            <param><type>vx_enum</type> <name>rounding_policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuAdd</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuSubtract</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in1</name></param>
            <param><type>vx_image</type> <name>in2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuWarpAffine</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuWarpPerspective</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_matrix</type> <name>matrix</name></param>
            <param><type>vx_enum</type> <name>type</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHarrisCorners</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_scalar</type> <name>min_distance</name></param>
            <param><type>vx_scalar</type> <name>sensitivity</name></param>
            <param><type>vx_int32</type> <name>gradient_size</name></param>
            <param><type>vx_int32</type> <name>block_size</name></param>
            <param><type>vx_array</type> <name>corners</name></param>
            <param><type>vx_scalar</type> <name>num_corners</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuFastCorners</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_scalar</type> <name>strength_thresh</name></param>
            <param><type>vx_bool</type> <name>nonmax_suppression</name></param>
            <param><type>vx_array</type> <name>corners</name></param>
            <param><type>vx_scalar</type> <name>num_corners</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuOpticalFlowPyrLK</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_pyramid</type> <name>old_images</name></param>
            <param><type>vx_pyramid</type> <name>new_images</name></param>
            <param><type>vx_array</type> <name>old_points</name></param>
            <param><type>vx_array</type> <name>new_points_estimates</name></param>
            <param><type>vx_array</type> <name>new_points</name></param>
            <param><type>vx_enum</type> <name>termination</name></param>
            <param><type>vx_scalar</type> <name>epsilon</name></param>
            <param><type>vx_scalar</type> <name>num_iterations</name></param>
            <param><type>vx_scalar</type> <name>use_initial_estimate</name></param>
            <param><type>vx_size</type> <name>window_dimension</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuMatchTemplate</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>src</name></param>
            <param><type>vx_image</type> <name>templateImage</name></param>
            <param><type>vx_enum</type> <name>matchingMethod</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuLBP</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>in</name></param>
            <param><type>vx_enum</type> <name>format</name></param>
            <param><type>vx_int8</type> <name>kernel_size</name></param>
            <param><type>vx_image</type> <name>out</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHOGFeatures</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_tensor</type> <name>magnitudes</name></param>
            <param><type>vx_tensor</type> <name>bins</name></param>
            <param>const <type>vx_hog_t</type>* <name>params</name></param>
            <param><type>vx_size</type> <name>hog_param_size</name></param>
            <param><type>vx_tensor</type> <name>features</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHOGCells</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_int32</type> <name>cell_width</name></param>
            <param><type>vx_int32</type> <name>cell_height</name></param>
            <param><type>vx_int32</type> <name>num_bins</name></param>
            <param><type>vx_tensor</type> <name>magnitudes</name></param>
            <param><type>vx_tensor</type> <name>bins</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuHoughLinesP</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param>const <type>vx_hough_lines_p_t</type>* <name>params</name></param>
            <param><type>vx_array</type> <name>lines_array</name></param>
            <param><type>vx_scalar</type> <name>num_lines</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuRemap</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_image</type> <name>input</name></param>
            <param><type>vx_remap</type> <name>table</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_image</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuBilateralFilter</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>src</name></param>
            <param><type>vx_int32</type> <name>diameter</name></param>
            <param><type>vx_float32</type> <name>sigmaSpace</name></param>
            <param><type>vx_float32</type> <name>sigmaValues</name></param>
            <param><type>vx_tensor</type> <name>dst</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorMultiply</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_scalar</type> <name>scale</name></param>
            <param><type>vx_enum</type> <name>overflow_policy</name></param>
            <param><type>vx_enum</type> <name>rounding_policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorAdd</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorSubtract</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorTableLookup</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorTranspose</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
            <param><type>vx_size</type> <name>dimension1</name></param>
            <param><type>vx_size</type> <name>dimension2</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorConvertDepth</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input</name></param>
            <param><type>vx_enum</type> <name>policy</name></param>
            <param><type>vx_scalar</type> <name>norm</name></param>
            <param><type>vx_scalar</type> <name>offset</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuTensorMatrixMultiply</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_tensor</type> <name>input1</name></param>
            <param><type>vx_tensor</type> <name>input2</name></param>
            <param><type>vx_tensor</type> <name>input3</name></param>
            <param>const <type>vx_tensor_matrix_multiply_params_t</type>* <name>matrix_multiply_params</name></param>
            <param><type>vx_tensor</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxuCopy</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_reference</type> <name>input</name></param>
            <param><type>vx_reference</type> <name>output</name></param>
        </command>
        <command>
            <proto><type>vx_kernel</type> <name>vxAddKernel</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param>const <type>vx_char</type> <name>name</name>[<enum>VX_MAX_KERNEL_NAME</enum>]</param>
            <param><type>vx_enum</type> <name>enumeration</name></param>
            <param><type>vx_kernel_f</type> <name>func_ptr</name></param>
            <param><type>vx_uint32</type> <name>numParams</name></param>
            <param><type>vx_kernel_input_validate_f</type> <name>input</name></param>
            <param><type>vx_kernel_output_validate_f</type> <name>output</name></param>
            <param><type>vx_kernel_initialize_f</type> <name>init</name></param>
            <param><type>vx_kernel_deinitialize_f</type> <name>deinit</name></param>
        </command>
        <command>
            <proto><type>vx_size</type> <name>vxComputeImagePatchSize</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_uint32</type> <name>plane_index</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAccessImagePatch</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_uint32</type> <name>plane_index</name></param>
            <param><type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCommitImagePatch</name></proto>
            <param><type>vx_image</type> <name>image</name></param>
            <param>const <type>vx_rectangle_t</type>* <name>rect</name></param>
            <param><type>vx_uint32</type> <name>plane_index</name></param>
            <param>const <type>vx_imagepatch_addressing_t</type>* <name>addr</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAccessArrayRange</name></proto>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_size</type> <name>start</name></param>
            <param><type>vx_size</type> <name>end</name></param>
            <param><type>vx_size</type>* <name>stride</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCommitArrayRange</name></proto>
            <param><type>vx_array</type> <name>arr</name></param>
            <param><type>vx_size</type> <name>start</name></param>
            <param><type>vx_size</type> <name>end</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAccessDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCommitDistribution</name></proto>
            <param><type>vx_distribution</type> <name>distribution</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAccessLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param>void** <name>ptr</name></param>
            <param><type>vx_enum</type> <name>usage</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxCommitLUT</name></proto>
            <param><type>vx_lut</type> <name>lut</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReadMatrix</name></proto>
            <param><type>vx_matrix</type> <name>mat</name></param>
            <param>void* <name>array</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxWriteMatrix</name></proto>
            <param><type>vx_matrix</type> <name>mat</name></param>
            <param>const void* <name>array</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReadConvolutionCoefficients</name></proto>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param><type>vx_int16</type>* <name>array</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxWriteConvolutionCoefficients</name></proto>
            <param><type>vx_convolution</type> <name>conv</name></param>
            <param>const <type>vx_int16</type>* <name>array</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxReadScalarValue</name></proto>
            <param><type>vx_scalar</type> <name>ref</name></param>
            <param>void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxWriteScalarValue</name></proto>
            <param><type>vx_scalar</type> <name>ref</name></param>
            <param>const void* <name>ptr</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetRemapPoint</name></proto>
            <param><type>vx_remap</type> <name>table</name></param>
            <param><type>vx_uint32</type> <name>dst_x</name></param>
            <param><type>vx_uint32</type> <name>dst_y</name></param>
            <param><type>vx_float32</type> <name>src_x</name></param>
            <param><type>vx_float32</type> <name>src_y</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGetRemapPoint</name></proto>
            <param><type>vx_remap</type> <name>table</name></param>
            <param><type>vx_uint32</type> <name>dst_x</name></param>
            <param><type>vx_uint32</type> <name>dst_y</name></param>
            <param><type>vx_float32</type>* <name>src_x</name></param>
            <param><type>vx_float32</type>* <name>src_y</name></param>
        </command>
        <command>
            <proto><type>vx_threshold</type> <name>vxCreateThreshold</name></proto>
            <param><type>vx_context</type> <name>c</name></param>
            <param><type>vx_enum</type> <name>thresh_type</name></param>
            <param><type>vx_enum</type> <name>data_type</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSetGraphScheduleConfig</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_enum</type> <name>graph_schedule_mode</name></param>
            <param><type>vx_uint32</type> <name>graph_parameters_list_size</name></param>
            <param>const <type>vx_graph_parameter_queue_params_t</type> <name>graph_parameters_queue_params_list[]</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGraphParameterEnqueueReadyRef</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>graph_parameter_index</name></param>
            <param><type>vx_reference</type> *<name>refs</name></param>
            <param><type>vx_uint32</type> <name>num_refs</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGraphParameterDequeueDoneRef</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>graph_parameter_index</name></param>
            <param><type>vx_reference</type> *<name>refs</name></param>
            <param><type>vx_uint32</type> <name>max_refs</name></param>
            <param><type>vx_uint32</type> *<name>num_refs</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxGraphParameterCheckDoneRef</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_uint32</type> <name>graph_parameter_index</name></param>
            <param><type>vx_uint32</type> *<name>num_refs</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxWaitEvent</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_event_t</type> *<name>event</name></param>
            <param><type>vx_bool</type> <name>do_not_block</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxEnableEvents</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxDisableEvents</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxSendUserEvent</name></proto>
            <param><type>vx_context</type> <name>context</name></param>
            <param><type>vx_uint32</type> <name>app_value</name></param>
            <param><type>void</type> *<name>parameter</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxRegisterEvent</name></proto>
            <param><type>vx_reference</type> <name>ref</name></param>
            <param>enum <type>vx_event_type_e</type> <name>type</name></param>
            <param><type>vx_uint32</type> <name>param</name></param>
            <param><type>vx_uint32</type> <name>app_value</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxEnableGraphStreaming</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
            <param><type>vx_node</type> <name>trigger_node</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxStartGraphStreaming</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxStopGraphStreaming</name></proto>
            <param><type>vx_graph</type> <name>graph</name></param>
        </command>
        <command>
            <proto><type>vx_status</type> <name>vxAliasParameterIndexHint</name></proto>
            <param><type>vx_kernel</type> <name>kernel</name></param>
            <param><type>vx_uint32</type> <name>parameter_index_a</name></param>
            <param><type>vx_uint32</type> <name>parameter_index_b</name></param>
            <param><type>vx_enum</type> <name>processing_type</name></param>
        </command>
        <command>
            <proto><type>vx_bool</type> <name>vxIsParameterAliased</name></proto>
            <param><type>vx_node</type> <name>node</name></param>
            <param><type>vx_uint32</type> <name>parameter_index_a</name></param>
            <param><type>vx_uint32</type> <name>parameter_index_b</name></param>
        </command>
    </commands>

    <!-- For extensions, extension name=<name> attribute is mapped to name.h and _NAME_H_ (unless protect= attribute is specified) -->

    <feature api="openvx" number="1.2" name="_OPENVX_API_H_" header="vx_api.h" comment="API functions">
        <require>
            <type name="vxFormatArrayPointer"/>
                <!-- vxArrayItem from vx_api.h not included here due to presence in vx_khr_opencl.h with an incompatible definition -->
            <command name="vxCreateContext"/>
            <command name="vxReleaseContext"/>
            <command name="vxGetContext"/>
            <command name="vxQueryContext"/>
            <command name="vxSetContextAttribute"/>
            <command name="vxHint"/>
            <command name="vxDirective"/>
            <command name="vxGetStatus"/>
            <command name="vxRegisterUserStruct"/>
            <command name="vxRegisterUserStructWithName"/>
            <command name="vxGetUserStructNameByEnum"/>
            <command name="vxGetUserStructEnumByName"/>
            <command name="vxAllocateUserKernelId"/>
            <command name="vxAllocateUserKernelLibraryId"/>
            <command name="vxSetImmediateModeTarget"/>
            <command name="vxCreateImage"/>
            <command name="vxCreateImageFromROI"/>
            <command name="vxCreateUniformImage"/>
            <command name="vxCreateVirtualImage"/>
            <command name="vxCreateImageFromHandle"/>
            <command name="vxSwapImageHandle"/>
            <command name="vxQueryImage"/>
            <command name="vxSetImageAttribute"/>
            <command name="vxSetImagePixelValues"/>
            <command name="vxReleaseImage"/>
            <command name="vxFormatImagePatchAddress1d"/>
            <command name="vxFormatImagePatchAddress2d"/>
            <command name="vxGetValidRegionImage"/>
            <command name="vxCopyImagePatch"/>
            <command name="vxMapImagePatch"/>
            <command name="vxUnmapImagePatch"/>
            <command name="vxCreateImageFromChannel"/>
            <command name="vxSetImageValidRectangle"/>
            <command name="vxLoadKernels"/>
            <command name="vxUnloadKernels"/>
            <command name="vxGetKernelByName"/>
            <command name="vxGetKernelByEnum"/>
            <command name="vxQueryKernel"/>
            <command name="vxReleaseKernel"/>
            <command name="vxAddUserKernel"/>
            <command name="vxFinalizeKernel"/>
            <command name="vxAddParameterToKernel"/>
            <command name="vxRemoveKernel"/>
            <command name="vxSetKernelAttribute"/>
            <command name="vxGetKernelParameterByIndex"/>
            <command name="vxCreateGraph"/>
            <command name="vxReleaseGraph"/>
            <command name="vxVerifyGraph"/>
            <command name="vxProcessGraph"/>
            <command name="vxScheduleGraph"/>
            <command name="vxWaitGraph"/>
            <command name="vxQueryGraph"/>
            <command name="vxSetGraphAttribute"/>
            <command name="vxAddParameterToGraph"/>
            <command name="vxSetGraphParameterByIndex"/>
            <command name="vxGetGraphParameterByIndex"/>
            <command name="vxIsGraphVerified"/>
            <command name="vxCreateGenericNode"/>
            <command name="vxQueryNode"/>
            <command name="vxSetNodeAttribute"/>
            <command name="vxReleaseNode"/>
            <command name="vxRemoveNode"/>
            <command name="vxAssignNodeCallback"/>
            <command name="vxRetrieveNodeCallback"/>
            <command name="vxSetNodeTarget"/>
            <command name="vxReplicateNode"/>
            <command name="vxGetParameterByIndex"/>
            <command name="vxReleaseParameter"/>
            <command name="vxSetParameterByIndex"/>
            <command name="vxSetParameterByReference"/>
            <command name="vxQueryParameter"/>
            <command name="vxCreateScalar"/>
            <command name="vxCreateScalarWithSize"/>
            <command name="vxCreateVirtualScalar"/>
            <command name="vxReleaseScalar"/>
            <command name="vxQueryScalar"/>
            <command name="vxCopyScalar"/>
            <command name="vxCopyScalarWithSize"/>
            <command name="vxQueryReference"/>
            <command name="vxReleaseReference"/>
            <command name="vxRetainReference"/>
            <command name="vxSetReferenceName"/>
            <command name="vxQueryDelay"/>
            <command name="vxReleaseDelay"/>
            <command name="vxCreateDelay"/>
            <command name="vxGetReferenceFromDelay"/>
            <command name="vxAgeDelay"/>
            <command name="vxRegisterAutoAging"/>
            <command name="vxAddLogEntry"/>
            <command name="vxRegisterLogCallback"/>
            <command name="vxCreateLUT"/>
            <command name="vxCreateVirtualLUT"/>
            <command name="vxReleaseLUT"/>
            <command name="vxQueryLUT"/>
            <command name="vxCopyLUT"/>
            <command name="vxMapLUT"/>
            <command name="vxUnmapLUT"/>
            <command name="vxCreateDistribution"/>
            <command name="vxCreateVirtualDistribution"/>
            <command name="vxReleaseDistribution"/>
            <command name="vxQueryDistribution"/>
            <command name="vxCopyDistribution"/>
            <command name="vxMapDistribution"/>
            <command name="vxUnmapDistribution"/>
            <command name="vxCreateThresholdForImage"/>
            <command name="vxCreateVirtualThresholdForImage"/>
            <command name="vxCopyThresholdValue"/>
            <command name="vxCopyThresholdRange"/>
            <command name="vxCopyThresholdOutput"/>
            <command name="vxReleaseThreshold"/>
            <command name="vxSetThresholdAttribute"/>
            <command name="vxQueryThreshold"/>
            <command name="vxCreateMatrix"/>
            <command name="vxCreateVirtualMatrix"/>
            <command name="vxReleaseMatrix"/>
            <command name="vxQueryMatrix"/>
            <command name="vxCopyMatrix"/>
            <command name="vxCreateMatrixFromPattern"/>
            <command name="vxCreateMatrixFromPatternAndOrigin"/>
            <command name="vxCreateConvolution"/>
            <command name="vxCreateVirtualConvolution"/>
            <command name="vxReleaseConvolution"/>
            <command name="vxQueryConvolution"/>
            <command name="vxSetConvolutionAttribute"/>
            <command name="vxCopyConvolutionCoefficients"/>
            <command name="vxCreatePyramid"/>
            <command name="vxCreateVirtualPyramid"/>
            <command name="vxReleasePyramid"/>
            <command name="vxQueryPyramid"/>
            <command name="vxGetPyramidLevel"/>
            <command name="vxCreateRemap"/>
            <command name="vxCreateVirtualRemap"/>
            <command name="vxReleaseRemap"/>
            <command name="vxMapRemapPatch"/>
            <command name="vxUnmapRemapPatch"/>
            <command name="vxCopyRemapPatch"/>
            <command name="vxQueryRemap"/>
            <command name="vxCreateArray"/>
            <command name="vxCreateVirtualArray"/>
            <command name="vxReleaseArray"/>
            <command name="vxQueryArray"/>
            <command name="vxAddArrayItems"/>
            <command name="vxTruncateArray"/>
            <command name="vxCopyArrayRange"/>
            <command name="vxMapArrayRange"/>
            <command name="vxUnmapArrayRange"/>
            <command name="vxCreateObjectArray"/>
            <command name="vxCreateVirtualObjectArray"/>
            <command name="vxGetObjectArrayItem"/>
            <command name="vxReleaseObjectArray"/>
            <command name="vxQueryObjectArray"/>
            <command name="vxSetMetaFormatAttribute"/>
            <command name="vxSetMetaFormatFromReference"/>
            <command name="vxCreateTensor"/>
            <command name="vxCreateTensorFromHandle"/>
            <command name="vxCreateImageObjectArrayFromTensor"/>
            <command name="vxCreateTensorFromView"/>
            <command name="vxCreateVirtualTensor"/>
            <command name="vxCopyTensorPatch"/>
            <command name="vxMapTensorPatch"/>
            <command name="vxUnmapTensorPatch"/>
            <command name="vxSwapTensorHandle"/>
            <command name="vxQueryTensor"/>
            <command name="vxReleaseTensor"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_H_" header="vx.h" comment="API macros">
        <require>
            <type name="VX/vx_vendors.h"/>
            <type name="VX/vx_types.h"/>
            <type name="VX/vx_kernels.h"/>
            <type name="VX/vx_api.h"/>
            <type name="VX/vx_nodes.h"/>

            <enum name="VX_MAX_IMPLEMENTATION_NAME"/>
            <enum name="VX_MAX_KERNEL_NAME"/>
            <enum name="VX_MAX_LOG_MESSAGE_LEN"/>
            <enum name="VX_MAX_REFERENCE_NAME"/>
            <type name="VX_VERSION_MAJOR"/>
            <type name="VX_VERSION_MINOR"/>
            <enum name="VX_VERSION_1_0"/>
            <enum name="VX_VERSION_1_1"/>
            <enum name="VX_VERSION_1_2"/>
            <enum name="VX_VERSION_1_3"/>
            <enum name="VX_VERSION"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_TYPES_H_" header="vx_types.h" comment="API types">
        <require>
            <type name="stdint.h"/>
            <type name="stddef.h"/>
            <type name="vx_char"/>
            <type name="vx_uint8"/>
            <type name="vx_uint16"/>
            <type name="vx_uint32"/>
            <type name="vx_uint64"/>
            <type name="vx_int8"/>
            <type name="vx_int16"/>
            <type name="vx_int32"/>
            <type name="vx_int64"/>
            <type name="vx_bitfield"/>
            <type name="vx_float16"/>
            <type name="vx_float32"/>
            <type name="vx_float64"/>
            <type name="vx_enum"/>
            <type name="vx_size"/>
            <type name="vx_df_image"/>
            <type name="vx_map_id"/>
            <type name="vx_reference"/>
            <type name="vx_scalar"/>
            <type name="vx_image"/>
            <type name="vx_kernel"/>
            <type name="vx_parameter"/>
            <type name="vx_node"/>
            <type name="vx_graph"/>
            <type name="vx_context"/>
            <type name="vx_delay"/>
            <type name="vx_lut"/>
            <type name="vx_distribution"/>
            <type name="vx_matrix"/>
            <type name="vx_pyramid"/>
            <type name="vx_threshold"/>
            <type name="vx_convolution"/>
            <type name="vx_remap"/>
            <type name="vx_array"/>
            <type name="vx_object_array"/>
            <type name="vx_tensor"/>
            <type name="vx_bool_e"/>
            <type name="vx_bool"/>
            <type name="vx_meta_format"/>
            <type name="vx_type_e"/>
            <type name="vx_status_e"/>
            <type name="vx_status"/>
            <type name="vx_action"/>
            <type name="vx_nodecomplete_f"/>
            <enum name="VX_VENDOR_MASK"/>
            <enum name="VX_TYPE_MASK"/>
            <enum name="VX_LIBRARY_MASK"/>
            <enum name="VX_KERNEL_MASK"/>
            <enum name="VX_ATTRIBUTE_ID_MASK"/>
            <enum name="VX_ENUM_TYPE_MASK"/>
            <enum name="VX_ENUM_MASK"/>
            <type name="VX_VENDOR"/>
            <type name="VX_TYPE"/>
            <type name="VX_ENUM_TYPE"/>
            <type name="VX_LIBRARY"/>
            <type name="VX_DF_IMAGE"/>
            <type name="VX_ATTRIBUTE_BASE"/>
            <type name="VX_KERNEL_BASE"/>
            <type name="VX_ENUM_BASE"/>
            <type name="vx_enum_e"/>
            <type name="vx_action_e"/>
            <type name="vx_direction_e"/>
            <type name="vx_hint_e"/>
            <type name="vx_directive_e"/>
            <type name="vx_graph_state_e"/>
            <type name="vx_graph_attribute_e"/>
            <type name="vx_convert_policy_e"/>
            <type name="vx_df_image_e"/>
            <type name="vx_target_e"/>
            <type name="vx_reference_attribute_e"/>
            <type name="vx_context_attribute_e"/>
            <type name="vx_kernel_attribute_e"/>
            <type name="vx_node_attribute_e"/>
            <type name="vx_parameter_attribute_e"/>
            <type name="vx_image_attribute_e"/>
            <type name="vx_scalar_attribute_e"/>
            <type name="vx_scalar_operation_e"/>
            <type name="vx_lut_attribute_e"/>
            <type name="vx_distribution_attribute_e"/>
            <type name="vx_threshold_type_e"/>
            <type name="vx_threshold_attribute_e"/>
            <type name="vx_matrix_attribute_e"/>
            <type name="vx_convolution_attribute_e"/>
            <type name="vx_pyramid_attribute_e"/>
            <type name="vx_remap_attribute_e"/>
            <type name="vx_array_attribute_e"/>
            <type name="vx_object_array_attribute_e"/>
            <type name="vx_tensor_attribute_e"/>
            <type name="vx_meta_valid_rect_attribute_e"/>
            <type name="vx_channel_e"/>
            <type name="vx_memory_type_e"/>
            <type name="vx_interpolation_type_e"/>
            <type name="vx_non_linear_filter_e"/>
            <type name="vx_pattern_e"/>
            <type name="vx_color_space_e"/>
            <type name="vx_channel_range_e"/>
            <type name="vx_parameter_state_e"/>
            <type name="vx_border_e"/>
            <type name="vx_border_policy_e"/>
            <type name="vx_termination_criteria_e"/>
            <type name="vx_norm_type_e"/>
            <type name="vx_delay_attribute_e"/>
            <type name="vx_accessor_e"/>
            <type name="vx_round_policy_e"/>
            <type name="vx_lbp_format_e"/>
            <type name="vx_comp_metric_e"/>
            <type name="VX_FMT_REF"/>
            <type name="VX_FMT_SIZE"/>
            <enum name="VX_SCALE_UNITY"/>
            <type name="vx_imagepatch_addressing_t"/>
            <enum name="VX_IMAGEPATCH_ADDR_INIT"/>
            <type name="vx_perf_t"/>
            <type name="vx_hough_lines_p_t"/>
            <type name="vx_line2d_t"/>
            <type name="vx_tensor_matrix_multiply_params_t"/>
            <enum name="VX_PERF_INIT"/>
            <type name="vx_kernel_info_t"/>
            <enum name="VX_SCALE_PYRAMID_HALF"/>
            <enum name="VX_SCALE_PYRAMID_ORB"/>
            <type name="vx_keypoint_t"/>
            <type name="vx_rectangle_t"/>
            <type name="vx_coordinates2d_t"/>
            <type name="vx_coordinates2df_t"/>
            <type name="vx_coordinates3d_t"/>
            <type name="vx_pixel_value_t"/>
            <type name="vx_hog_t"/>
            <type name="vx_border_t"/>
            <type name="vx_publish_kernels_f"/>
            <type name="vx_unpublish_kernels_f"/>
            <type name="vx_kernel_f"/>
            <type name="vx_kernel_initialize_f"/>
            <type name="vx_kernel_deinitialize_f"/>
            <type name="vx_kernel_validate_f"/>
            <type name="vx_kernel_image_valid_rectangle_f"/>
            <type name="vx_log_callback_f"/>
            <type name="vx_map_flag_e"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_UTILITY_H_" header="vxu.h" comment="API utility functions">
        <require>
            <command name="vxuColorConvert"/>
            <command name="vxuChannelExtract"/>
            <command name="vxuChannelCombine"/>
            <command name="vxuSobel3x3"/>
            <command name="vxuMagnitude"/>
            <command name="vxuPhase"/>
            <command name="vxuScaleImage"/>
            <command name="vxuTableLookup"/>
            <command name="vxuHistogram"/>
            <command name="vxuEqualizeHist"/>
            <command name="vxuAbsDiff"/>
            <command name="vxuMeanStdDev"/>
            <command name="vxuThreshold"/>
            <command name="vxuNonMaxSuppression"/>
            <command name="vxuIntegralImage"/>
            <command name="vxuErode3x3"/>
            <command name="vxuDilate3x3"/>
            <command name="vxuMedian3x3"/>
            <command name="vxuBox3x3"/>
            <command name="vxuGaussian3x3"/>
            <command name="vxuNonLinearFilter"/>
            <command name="vxuConvolve"/>
            <command name="vxuGaussianPyramid"/>
            <command name="vxuLaplacianPyramid"/>
            <command name="vxuLaplacianReconstruct"/>
            <command name="vxuWeightedAverage"/>
            <command name="vxuMinMaxLoc"/>
            <command name="vxuMin"/>
            <command name="vxuMax"/>
            <command name="vxuConvertDepth"/>
            <command name="vxuCannyEdgeDetector"/>
            <command name="vxuHalfScaleGaussian"/>
            <command name="vxuAnd"/>
            <command name="vxuOr"/>
            <command name="vxuXor"/>
            <command name="vxuNot"/>
            <command name="vxuMultiply"/>
            <command name="vxuAdd"/>
            <command name="vxuSubtract"/>
            <command name="vxuWarpAffine"/>
            <command name="vxuWarpPerspective"/>
            <command name="vxuHarrisCorners"/>
            <command name="vxuFastCorners"/>
            <command name="vxuOpticalFlowPyrLK"/>
            <command name="vxuMatchTemplate"/>
            <command name="vxuLBP"/>
            <command name="vxuHOGFeatures"/>
            <command name="vxuHOGCells"/>
            <command name="vxuHoughLinesP"/>
            <command name="vxuRemap"/>
            <command name="vxuBilateralFilter"/>
            <command name="vxuTensorMultiply"/>
            <command name="vxuTensorAdd"/>
            <command name="vxuTensorSubtract"/>
            <command name="vxuTensorTableLookup"/>
            <command name="vxuTensorTranspose"/>
            <command name="vxuTensorConvertDepth"/>
            <command name="vxuTensorMatrixMultiply"/>
            <command name="vxuCopy"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_VENDORS_H_" header="vx_vendors.h" comment="API vendor registry">
        <require>
            <type name="vx_vendor_id_e"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_VX_HELPER_H_" header="vx_helper.h" comment="API helper functions">
        <require>
            <enum name="VX_TAU"/>
            <enum name="VX_MAX_LOG_NUM_ENTRIES"/>
            <type name="dimof"/>
            <type name="vx_param_description_t"/>
            <type name="vx_kernel_description_t"/>
            <type name="vx_log_entry_t"/>
            <type name="vx_log_t"/>
            <type name="FGETS"/>
            <command name="math_gcd"/>
            <command name="vxGetLogEntry"/>
            <command name="vxRegisterHelperAsLogReader"/>
            <command name="vxCreateNodeByStructure"/>
            <command name="vxClearLog"/>
            <command name="vxLinkParametersByReference"/>
            <command name="vxLinkParametersByIndex"/>
            <command name="vxSetAffineRotationMatrix"/>
            <command name="vxAlterRectangle"/>
            <command name="vxAddParameterToGraphByIndex"/>
            <command name="vxFindAllTargetsOfKernelsByName" comment="#if EXPERIMENTAL_USE_TARGET"/>
            <command name="vxCreateListOfAllTargets" comment="#if EXPERIMENTAL_USE_TARGET"/>
            <command name="vxDestroyListOfAllTargets" comment="#if EXPERIMENTAL_USE_TARGET"/>
            <command name="vxFindOverlapRectangle"/>
            <command name="vxReadRectangle"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_IMPORT_H_" header="vx_import.h" comment="API import functions">
        <require>
            <enum name="VX_ENUM_IX_USE"/>
            <enum name="VX_IX_USE_APPLICATION_CREATE"/>
            <enum name="VX_IX_USE_EXPORT_VALUES"/>
            <enum name="VX_IX_USE_NO_EXPORT_VALUES"/>
            <type name="vx_import"/>
            <enum name="VX_TYPE_IMPORT"/>
            <command name="vxImportObjectsFromMemory"/>
            <command name="vxReleaseImport"/>
            <command name="vxGetImportReferenceByName"/>
        </require>
    </feature>

    <feature api="openvx" number="1.2" name="_OPENVX_KERNELS_H_" header="vx_kernels.h" comment="API kernels">
        <require>
            <type name="vx_library_e"/>
            <type name="vx_kernel_e"/>
        </require>
    </feature>

    <extensions>
        <extension name="vx_ext_target" author="EXT" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_EXT_TARGET"/>
                <enum name="VX_MAX_TARGET_NAME"/>
                <type name="vx_ext_target_type_e"/>
                <type name="vx_ext_target_context_attribute_e"/>
                <type name="vx_target"/>
                <type name="vx_target_attribute_e"/>
                <command name="vxGetTargetByIndex"/>
                <command name="vxGetTargetByName"/>
                <command name="vxReleaseTarget"/>
                <command name="vxQueryTarget"/>
                <command name="vxAssignNodeAffinity"/>
            </require>
        </extension>

        <extension name="vx_khr_class" protect="_VX_KHR_CLASSIFIER_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_CLASS"/>
                <enum name="VX_LIBRARY_KHR_CLASS_EXTENSION"/>
                <type name="vx_kernel_nn_ext_e"/>
                <type name="vx_class_enum_e"/>
                <type name="vx_classifier_model"/>
                <type name="vx_classifier_model_format_e"/>
                <type name="vx_classifier_type_e"/>
                <command name="vxImportClassifierModel"/>
                <command name="vxReleaseClassifierModel"/>
                <command name="vxScanClassifierNode"/>
            </require>
        </extension>

        <extension name="vk_khr_dot" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_DOT"/>
                <command name="vxExportGraphToDot"/>
            </require>
        </extension>

        <extension name="vx_khr_opencl_interop" author="KHR" contact="???" supported="openvx">
            <require>
                <command name="vxCreateContextFromCL"/>
            </require>
        </extension>

        <extension name="vk_khr_icd" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <type name="VX/vxu.h"/>
                <type name="vx_platform"/>
                <command name="vxIcdGetPlatforms"/>
                <command name="vxQueryPlatform"/>
                <command name="vxCreateContextFromPlatform"/>
            </require>
        </extension>

        <extension name="vx_khr_interp" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_INTERP"/>
                <type name="vx_interpolation_type_ext_e"/>
            </require>
        </extension>

        <extension name="vx_khr_ix" protect="_VX_KHR_IMPORT_EXPORT_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx_import.h"/>
                <enum name="OPENVX_KHR_IX"/>
                <command name="vxExportObjectsToMemory"/>
                <command name="vxReleaseExportedMemory"/>
            </require>
        </extension>

        <extension name="vx_khr_nn" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_NN"/>
                <enum name="VX_LIBRARY_KHR_NN_EXTENSION"/>
                <type name="vx_kernel_nn_ext_e"/>
                <type name="vx_nn_enum_e"/>
                <type name="vx_nn_rounding_type_e"/>
                <type name="vx_nn_pooling_type_e"/>
                <type name="vx_nn_norm_type_e"/>
                <type name="vx_nn_activation_function_e"/>
                <type name="vx_nn_type_e"/>
                <type name="vx_nn_convolution_params_t"/>
                <type name="vx_nn_deconvolution_params_t"/>
                <type name="vx_nn_roi_pool_params_t"/>
                <command name="vxConvolutionLayer"/>
                <command name="vxFullyConnectedLayer"/>
                <command name="vxPoolingLayer"/>
                <command name="vxSoftmaxLayer"/>
                <command name="vxNormalizationLayer"/>
                <command name="vxLocalResponseNormalizationLayer"/>
                <command name="vxActivationLayer"/>
                <command name="vxROIPoolingLayer"/>
                <command name="vxDeconvolutionLayer"/>
            </require>
        </extension>

        <extension name="vx_khr_node_memory" author="KHR" contact="???" supported="openvx">
            <require>
                <enum name="OPENVX_KHR_NODE_MEMORY"/>
                <type name="vx_kernel_attribute_memory_e"/>
                <type name="vx_node_attribute_memory_e"/>
            </require>
        </extension>

        <extension name="vx_khr_opencl" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="VX_SCALE_UNITY"/>
                <enum name="VX_CL_MAX_PLANES"/>
                <enum name="OPENVX_KHR_OPENCL"/>
                <command name="vxAddOpenCLAsSourceKernel"/>
                <command name="vxAddOpenCLAsBinaryKernel"/>
                <type name="vxImagePixel"/>
                <type name="vxArrayItem"/>
                <type name="vxMatrixElement"/>
                <type name="vxConvolveElement"/>
                <type name="vxGetFrequency"/>
                <type name="vxIncFrequency"/>
                <type name="vxDecFrequency"/>
            </require>
            <require feature="VX_VERSION_1_1">
                <comment>#if defined(VX_VERSION_1_1) &amp;&amp; (VX_VERSION >= VX_VERSION_1_1)</comment>
                <type name="vxGetFrequency2"/>
                <type name="vxIncFrequency2"/>
                <type name="vxDecFrequency2"/>
            </require>
        </extension>

        <extension name="vx_khr_tiling" author="KHR" contact="???" supported="openvx">
            <require>
                <enum name="OPENVX_KHR_TILING"/>
            <!--
        #if defined(OPENVX_TILING_1_0)
        #undef OPENVX_TILING_1_1
        #endif
            -->
                <type name="VX/vx.h"/>
                <type name="VX/vx_compatibility.h"/>
                <type name="FGETS"/>
                <type name="vx_tile_block_size_t"/>
                <type name="vx_neighborhood_size_t"/>
                <type name="vx_image_description_t"/>
                <enum name="VX_MAX_TILING_PLANES"/>
                <type name="vx_tile_t"/>
                <type name="vx_kernel_attribute_tiling_e"/>
                <type name="vx_node_attribute_tiling_e"/>
                <type name="vx_border_tiling_e"/>
                <type name="vx_tiling_kernel_f"/>
                <command name="vxAddTilingKernel"/>
            </require>
            <require feature="!VX_TILE_ATTRIBUTES_DEFINITIONS">
                <type name="vxImageHeight" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxImageWidth" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileX" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileY" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileWidth" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileHeight" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileBlockHeight" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxTileBlockWidth" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxNeighborhoodLeft" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxNeighborhoodRight" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxNeighborhoodTop" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxNeighborhoodBottom" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS"/>
                <type name="vxStrideSizeX" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS / #if 0"/>
                <type name="vxStrideSizeY" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS / #if 0"/>
                <type name="vxStepSizeX" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS / #if 0"/>
                <type name="vxStepSizeY" comment="#ifndef VX_TILE_ATTRIBUTES_DEFINITIONS / #if 0"/>
            </require>
            <require feature="!VX_IMAGE_PIXEL_DEFINITION">
                <type name="vxImageOffset" comment="#ifndef VX_IMAGE_PIXEL_DEFINITION"/>
                <type name="vxImagePixel" comment="#ifndef VX_IMAGE_PIXEL_DEFINITION"/>
            </require>
        </extension>

        <extension name="vx_khr_variant" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>

                <enum name="OPENVX_KHR_VARIANTS"/>
                <enum name="VX_MAX_VARIANT_NAME"/>
                <command name="vxChooseKernelVariant"/>
            </require>
        </extension>

        <extension name="vx_khr_xml" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_XML"/>
                <type name="vx_ext_import_type_e"/>
                <type name="vx_ext_import_types_e"/>
                <type name="vx_import_attribute_e"/>
                <type name="vx_import"/>
                <command name="vxExportToXML"/>
                <command name="vxImportFromXML"/>
                <command name="vxGetImportReferenceByName"/>
                <command name="vxGetImportReferenceByIndex"/>
                <command name="vxQueryImport"/>
                <command name="vxReleaseImport"/>
            </require>
        </extension>

        <extension name="vx_khr_lib_debug" protect="_OPENVX_EXT_DEBUG_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="VX_MAX_FILE_NAME"/>
                <enum name="VX_LIBRARY_KHR_DEBUG"/>
                <type name="vx_kernel_debug_ext_e"/>
                <command name="vxCopyImageNode"/>
                <command name="vxCopyArrayNode"/>
                <command name="vxFWriteImageNode"/>
                <command name="vxFWriteArrayNode"/>
                <command name="vxFReadImageNode"/>
                <command name="vxFReadArrayNode"/>
                <command name="vxPlusOneNode"/>
                <command name="vxFillImageNode"/>
                <command name="vxCheckImageNode"/>
                <command name="vxCheckArrayNode"/>
                <command name="vxCompareImagesNode"/>
                <command name="vxCopyImageFromPtrNode"/>
                <command name="vxuCopyImage"/>
                <command name="vxuCopyArray"/>
                <command name="vxuFWriteImage"/>
                <command name="vxuFWriteArray"/>
                <command name="vxuFReadImage"/>
                <command name="vxuFReadArray"/>
                <command name="vxuPlusOneNode"/>
                <command name="vxuFillImage"/>
                <command name="vxuCheckImage"/>
                <command name="vxuCheckArray"/>
                <command name="vxuCompareImages"/>
                <command name="vxuCopyImageFromPtr"/>
            </require>
        </extension>

        <extension name="vx_khr_extras" author="KHR" contact="???" supported="openvx">
            <require>
                <enum name="VX_LIBRARY_KHR_EXTRAS"/>
                <type name="vx_kernel_extras_ext_e"/>
                <type name="vx_extra_df_image"/>
                <command name="vxNonMaxSuppressionCannyNode"/>
                <command name="vxLaplacian3x3Node"/>
                <command name="vxuLaplacian3x3"/>
                <command name="vxScharr3x3Node"/>
                <command name="vxuScharr3x3"/>
                <command name="vxSobelMxNNode"/>
                <command name="vxuSobelMxN"/>
                <command name="vxHarrisScoreNode"/>
                <command name="vxuHarrisScore"/>
                <command name="vxEuclideanNonMaxHarrisNode"/>
                <command name="vxuEuclideanNonMaxHarris"/>
                <command name="vxImageListerNode"/>
                <command name="vxuImageLister"/>
                <command name="vxElementwiseNormNode"/>
                <command name="vxEdgeTraceNode"/>
            </require>
        </extension>


        <extension name="vx_khr_nodes" protect="_OPENVX_NODES_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <command name="vxColorConvertNode"/>
                <command name="vxChannelExtractNode"/>
                <command name="vxChannelCombineNode"/>
                <command name="vxPhaseNode"/>
                <command name="vxSobel3x3Node"/>
                <command name="vxMagnitudeNode"/>
                <command name="vxScaleImageNode"/>
                <command name="vxTableLookupNode"/>
                <command name="vxHistogramNode"/>
                <command name="vxEqualizeHistNode"/>
                <command name="vxAbsDiffNode"/>
                <command name="vxMeanStdDevNode"/>
                <command name="vxThresholdNode"/>
                <command name="vxNonMaxSuppressionNode"/>
                <command name="vxIntegralImageNode"/>
                <command name="vxErode3x3Node"/>
                <command name="vxDilate3x3Node"/>
                <command name="vxMedian3x3Node"/>
                <command name="vxBox3x3Node"/>
                <command name="vxGaussian3x3Node"/>
                <command name="vxNonLinearFilterNode"/>
                <command name="vxConvolveNode"/>
                <command name="vxGaussianPyramidNode"/>
                <command name="vxLaplacianPyramidNode"/>
                <command name="vxLaplacianReconstructNode"/>
                <command name="vxWeightedAverageNode"/>
                <command name="vxMinMaxLocNode"/>
                <command name="vxMinNode"/>
                <command name="vxMaxNode"/>
                <command name="vxAndNode"/>
                <command name="vxOrNode"/>
                <command name="vxXorNode"/>
                <command name="vxNotNode"/>
                <command name="vxScalarOperationNode"/>
                <command name="vxSelectNode"/>
                <command name="vxMultiplyNode"/>
                <command name="vxAddNode"/>
                <command name="vxSubtractNode"/>
                <command name="vxConvertDepthNode"/>
                <command name="vxCannyEdgeDetectorNode"/>
                <command name="vxWarpAffineNode"/>
                <command name="vxWarpPerspectiveNode"/>
                <command name="vxHarrisCornersNode"/>
                <command name="vxFastCornersNode"/>
                <command name="vxOpticalFlowPyrLKNode"/>
                <command name="vxRemapNode"/>
                <command name="vxHalfScaleGaussianNode"/>
                <command name="vxMatchTemplateNode"/>
                <command name="vxLBPNode"/>
                <command name="vxHOGFeaturesNode"/>
                <command name="vxHOGCellsNode"/>
                <command name="vxHoughLinesPNode"/>
                <command name="vxBilateralFilterNode"/>
                <command name="vxTensorMultiplyNode"/>
                <command name="vxTensorAddNode"/>
                <command name="vxTensorSubtractNode"/>
                <command name="vxTensorTableLookupNode"/>
                <command name="vxTensorTransposeNode"/>
                <command name="vxTensorConvertDepthNode"/>
                <command name="vxTensorMatrixMultiplyNode"/>
                <command name="vxCopyNode"/>
            </require>
        </extension>
        <extension name="vx_khr_pipelining" protect="_OPENVX_PIPELINING_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_PIPELINING"/>
            </require>
            <require comment="pipelining interfaces">
                <type name="vx_graph_attribute_pipelining_e"/>
                <type name="vx_graph_schedule_mode_enum_e"/>
                <type name="vx_graph_schedule_mode_type_e"/>
                <type name="vx_graph_parameter_queue_params_t"/>
                <command name="vxGraphParameterCheckDoneRef"/>
                <command name="vxGraphParameterDequeueDoneRef"/>
                <command name="vxGraphParameterEnqueueReadyRef"/>
                <command name="vxSetGraphScheduleConfig"/>
            </require>
            <require comment="streaming interfaces">
                <type name="vx_node_state_enum_e"/>
                <type name="vx_node_state_e"/>
                <type name="vx_node_attribute_streaming_e"/>
                <type name="vx_kernel_attribute_streaming_e"/>
                <command name="vxEnableGraphStreaming"/>
                <command name="vxStartGraphStreaming"/>
                <command name="vxStopGraphStreaming"/>
            </require>
            <require comment="pipelining interfaces">
                <type name="vx_event_enum_e"/>
                <type name="vx_event_type_e"/>
                <type name="vx_event_graph_completed"/>
                <type name="vx_event_graph_parameter_consumed"/>
                <type name="vx_event_node_completed"/>
                <type name="vx_event_node_error"/>
                <type name="vx_event_user_event"/>
                <type name="vx_event_info_t"/>
                <type name="vx_event_t"/>
                <command name="vxDisableEvents"/>
                <command name="vxEnableEvents"/>
                <command name="vxRegisterEvent"/>
                <command name="vxSendUserEvent"/>
                <command name="vxWaitEvent"/>
            </require>
        </extension>
        <extension name="vx_khr_kernel_import" protect="_OPENVX_IMPORT_KERNEL_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_IMPORT_KERNEL"/>
                <command name="vxImportKernelFromURL"/>
                <command name="vxQueryMetaFormatAttribute"/>
            </require>
        </extension>
        <extension name="vx_khr_buffer_aliasing" protect="_OPENVX_BUFFER_ALIASING_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_BUFFER_ALIASING"/>
                <type name="vx_buffer_aliasing_enum_e"/>
                <type name="vx_buffer_aliasing_processing_type_e"/>
                <command name="vxAliasParameterIndexHint"/>
                <command name="vxIsParameterAliased"/>
            </require>
        </extension>
        <extension name="vx_khr_user_data_object" protect="_OPENVX_USER_DATA_OBJECT_H_" author="KHR" contact="???" supported="openvx">
            <require>
                <type name="VX/vx.h"/>
                <enum name="OPENVX_KHR_USER_DATA_OBJECT"/>
                <type name="VX_TYPE_USER_DATA_OBJECT"/>
                <type name="vx_user_data_object"/>
                <type name="vx_user_data_object_attribute_e"/>
                <command name="vxCreateUserDataObject"/>
                <command name="vxCreateVirtualUserDataObject"/>
                <command name="vxReleaseUserDataObject"/>
                <command name="vxQueryUserDataObject"/>
                <command name="vxSetUserDataObjectAttribute"/>
                <command name="vxCopyUserDataObject"/>
                <command name="vxMapUserDataObject"/>
                <command name="vxUnmapUserDataObject"/>
            </require>
        </extension>
     </extensions>
</registry>
